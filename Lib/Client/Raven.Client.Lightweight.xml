<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Raven.Client.Lightweight</name>
    </assembly>
    <members>
        <member name="T:Raven.Bundles.Replication.Data.ReplicationDestination">
            <summary>
            Data class for replication destination documents
            </summary>
        </member>
        <member name="P:Raven.Bundles.Replication.Data.ReplicationDestination.Url">
            <summary>
            Gets or sets the URL of the replication destination
            </summary>
            <value>The URL.</value>
        </member>
        <member name="T:Raven.Bundles.Replication.Data.ReplicationDocument">
            <summary>
            This class represent the list of replication destinations for the server
            </summary>
        </member>
        <member name="M:Raven.Bundles.Replication.Data.ReplicationDocument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Bundles.Replication.Data.ReplicationDocument"/> class.
            </summary>
        </member>
        <member name="P:Raven.Bundles.Replication.Data.ReplicationDocument.Destinations">
            <summary>
            Gets or sets the list of replication destinations.
            </summary>
        </member>
        <member name="P:Raven.Bundles.Replication.Data.ReplicationDocument.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="T:Raven.Client.Client.Async.AsyncServerClient">
            <summary>
            Access the database commands in async fashion
            </summary>
        </member>
        <member name="T:Raven.Client.Client.Async.IAsyncDatabaseCommands">
            <summary>
            An async database command operations
            </summary>
        </member>
        <member name="M:Raven.Client.Client.Async.IAsyncDatabaseCommands.BeginGet(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an async get operation
            </summary>
            <param name="key">The key.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Raven.Client.Client.Async.IAsyncDatabaseCommands.EndGet(System.IAsyncResult)">
            <summary>
            Ends the async get operation
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:Raven.Client.Client.Async.IAsyncDatabaseCommands.BeginMultiGet(System.String[],System.AsyncCallback,System.Object)">
            <summary>
            Begins an async multi get operation
            </summary>
            <param name="keys">The keys.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Raven.Client.Client.Async.IAsyncDatabaseCommands.EndMultiGet(System.IAsyncResult)">
            <summary>
            Ends the aync multi get operation
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:Raven.Client.Client.Async.IAsyncDatabaseCommands.BeginQuery(System.String,Raven.Database.Data.IndexQuery,System.AsyncCallback,System.Object)">
            <summary>
            Begins the aysnc query.
            </summary>
            <param name="index">The index.</param>
            <param name="query">The query.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Raven.Client.Client.Async.IAsyncDatabaseCommands.EndQuery(System.IAsyncResult)">
            <summary>
            Ends the async query.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.Async.IAsyncDatabaseCommands.BeginBatch(Raven.Database.Data.ICommandData[],System.AsyncCallback,System.Object)">
            <summary>
            Begins the async batch operation
            </summary>
            <param name="commandDatas">The command datas.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Raven.Client.Client.Async.IAsyncDatabaseCommands.EndBatch(System.IAsyncResult)">
            <summary>
            Ends the aync batch operation
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:Raven.Client.Client.Async.AsyncServerClient.#ctor(System.String,Raven.Client.Document.DocumentConvention,System.Net.ICredentials)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Client.Async.AsyncServerClient"/> class.
            </summary>
            <param name="url">The URL.</param>
            <param name="convention">The convention.</param>
            <param name="credentials">The credentials.</param>
        </member>
        <member name="M:Raven.Client.Client.Async.AsyncServerClient.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Raven.Client.Client.Async.AsyncServerClient.BeginGet(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an async get operation
            </summary>
            <param name="key">The key.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.Async.AsyncServerClient.EndGet(System.IAsyncResult)">
            <summary>
            Ends the async get operation
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.Async.AsyncServerClient.BeginMultiGet(System.String[],System.AsyncCallback,System.Object)">
            <summary>
            Begins an async multi get operation
            </summary>
            <param name="keys">The keys.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.Async.AsyncServerClient.EndMultiGet(System.IAsyncResult)">
            <summary>
            Ends the aync multi get operation
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.Async.AsyncServerClient.BeginQuery(System.String,Raven.Database.Data.IndexQuery,System.AsyncCallback,System.Object)">
            <summary>
            Begins the aysnc query.
            </summary>
            <param name="index">The index.</param>
            <param name="query">The query.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.Async.AsyncServerClient.EndQuery(System.IAsyncResult)">
            <summary>
            Ends the async query.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.Async.AsyncServerClient.BeginBatch(Raven.Database.Data.ICommandData[],System.AsyncCallback,System.Object)">
            <summary>
            Begins the async batch operation
            </summary>
            <param name="commandDatas">The command datas.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.Async.AsyncServerClient.EndBatch(System.IAsyncResult)">
            <summary>
            Ends the aync batch operation
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.Client.Async.AsyncServerClient.MultiStepAsyncResult">
            <summary>
            An async result that contains mulitple steps 
            </summary>
        </member>
        <member name="M:Raven.Client.Client.Async.AsyncServerClient.MultiStepAsyncResult.#ctor(System.Object,Raven.Client.Client.HttpJsonRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Client.Async.AsyncServerClient.MultiStepAsyncResult"/> class.
            </summary>
            <param name="state">The state.</param>
            <param name="req">The req.</param>
        </member>
        <member name="M:Raven.Client.Client.Async.AsyncServerClient.MultiStepAsyncResult.Complete">
            <summary>
            Completes this instance.
            </summary>
        </member>
        <member name="P:Raven.Client.Client.Async.AsyncServerClient.MultiStepAsyncResult.Result">
            <summary>
            Gets or sets the result.
            </summary>
            <value>The result.</value>
        </member>
        <member name="P:Raven.Client.Client.Async.AsyncServerClient.MultiStepAsyncResult.IsCompleted">
            <summary>
            Gets a value that indicates whether the asynchronous operation has completed.
            </summary>
            <value></value>
            <returns>true if the operation is complete; otherwise, false.</returns>
        </member>
        <member name="P:Raven.Client.Client.Async.AsyncServerClient.MultiStepAsyncResult.AsyncWaitHandle">
            <summary>
            Gets a <see cref="T:System.Threading.WaitHandle"/> that is used to wait for an asynchronous operation to complete.
            </summary>
            <value></value>
            <returns>A <see cref="T:System.Threading.WaitHandle"/> that is used to wait for an asynchronous operation to complete.</returns>
        </member>
        <member name="P:Raven.Client.Client.Async.AsyncServerClient.MultiStepAsyncResult.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
            <value></value>
            <returns>A user-defined object that qualifies or contains information about an asynchronous operation.</returns>
        </member>
        <member name="P:Raven.Client.Client.Async.AsyncServerClient.MultiStepAsyncResult.CompletedSynchronously">
            <summary>
            Gets a value that indicates whether the asynchronous operation completed synchronously.
            </summary>
            <value></value>
            <returns>true if the asynchronous operation completed synchronously; otherwise, false.</returns>
        </member>
        <member name="P:Raven.Client.Client.Async.AsyncServerClient.MultiStepAsyncResult.Request">
            <summary>
            Gets the request.
            </summary>
            <value>The request.</value>
        </member>
        <member name="P:Raven.Client.Client.Async.AsyncServerClient.MultiStepAsyncResult.Error">
            <summary>
            Gets or sets the error.
            </summary>
            <value>The error.</value>
        </member>
        <member name="T:Raven.Client.Client.Async.WrapperAsyncData`1">
            <summary>
            An <see cref="T:System.IAsyncResult"/> that wraps another <see cref="T:System.IAsyncResult"/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Raven.Client.Client.Async.WrapperAsyncData`1.#ctor(System.IAsyncResult,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Client.Async.WrapperAsyncData`1"/> class.
            </summary>
            <param name="inner">The inner.</param>
            <param name="wrapped">The wrapped.</param>
        </member>
        <member name="P:Raven.Client.Client.Async.WrapperAsyncData`1.IsCompleted">
            <summary>
            Gets a value that indicates whether the asynchronous operation has completed.
            </summary>
            <value></value>
            <returns>true if the operation is complete; otherwise, false.</returns>
        </member>
        <member name="P:Raven.Client.Client.Async.WrapperAsyncData`1.AsyncWaitHandle">
            <summary>
            Gets a <see cref="T:System.Threading.WaitHandle"/> that is used to wait for an asynchronous operation to complete.
            </summary>
            <value></value>
            <returns>A <see cref="T:System.Threading.WaitHandle"/> that is used to wait for an asynchronous operation to complete.</returns>
        </member>
        <member name="P:Raven.Client.Client.Async.WrapperAsyncData`1.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
            <value></value>
            <returns>A user-defined object that qualifies or contains information about an asynchronous operation.</returns>
        </member>
        <member name="P:Raven.Client.Client.Async.WrapperAsyncData`1.CompletedSynchronously">
            <summary>
            Gets a value that indicates whether the asynchronous operation completed synchronously.
            </summary>
            <value></value>
            <returns>true if the asynchronous operation completed synchronously; otherwise, false.</returns>
        </member>
        <member name="P:Raven.Client.Client.Async.WrapperAsyncData`1.Wrapped">
            <summary>
            Gets the wrapped instance.
            </summary>
            <value>The wrapped.</value>
        </member>
        <member name="P:Raven.Client.Client.Async.WrapperAsyncData`1.Inner">
            <summary>
            Gets the inner <see cref="T:System.IAsyncResult"/>.
            </summary>
            <value>The inner.</value>
        </member>
        <member name="T:Raven.Client.Client.HttpJsonRequest">
            <summary>
            A representation of an http json request to the RavenDB server
            </summary>
        </member>
        <member name="M:Raven.Client.Client.HttpJsonRequest.CreateHttpJsonRequest(System.Object,System.String,System.String,System.Net.ICredentials)">
            <summary>
            Creates the HTTP json request.
            </summary>
            <param name="self">The self.</param>
            <param name="url">The URL.</param>
            <param name="method">The method.</param>
            <param name="credentials">The credentials.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.HttpJsonRequest.CreateHttpJsonRequest(System.Object,System.String,System.String,Newtonsoft.Json.Linq.JObject,System.Net.ICredentials)">
            <summary>
            Creates the HTTP json request.
            </summary>
            <param name="self">The self.</param>
            <param name="url">The URL.</param>
            <param name="method">The method.</param>
            <param name="metadata">The metadata.</param>
            <param name="credentials">The credentials.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.HttpJsonRequest.BeginReadResponseString(System.AsyncCallback,System.Object)">
            <summary>
            Begins tp read response string.
            </summary>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.HttpJsonRequest.EndReadResponseString(System.IAsyncResult)">
            <summary>
            Ends the reading of the response string.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.HttpJsonRequest.ReadResponseString">
            <summary>
            Reads the response string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.HttpJsonRequest.Write(System.String)">
            <summary>
            Writes the specified data.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Raven.Client.Client.HttpJsonRequest.Write(System.Byte[])">
            <summary>
            Writes the specified byte array.
            </summary>
            <param name="byteArray">The byte array.</param>
        </member>
        <member name="M:Raven.Client.Client.HttpJsonRequest.BeginWrite(System.Byte[],System.AsyncCallback,System.Object)">
            <summary>
            Begins the write operation
            </summary>
            <param name="byteArray">The byte array.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.HttpJsonRequest.EndWrite(System.IAsyncResult)">
            <summary>
            Ends the write operation.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:Raven.Client.Client.HttpJsonRequest.AddOperationHeaders(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds the operation headers.
            </summary>
            <param name="operationsHeaders">The operations headers.</param>
        </member>
        <member name="E:Raven.Client.Client.HttpJsonRequest.ConfigureRequest">
            <summary>
            Occurs when a json request is created
            </summary>
        </member>
        <member name="P:Raven.Client.Client.HttpJsonRequest.ResponseHeaders">
            <summary>
            Gets or sets the response headers.
            </summary>
            <value>The response headers.</value>
        </member>
        <member name="P:Raven.Client.Client.HttpJsonRequest.ResponseStatusCode">
            <summary>
            Gets or sets the response status code.
            </summary>
            <value>The response status code.</value>
        </member>
        <member name="T:Raven.Client.Client.IDatabaseCommands">
            <summary>
             Expose the set of operations by the RavenDB server
            </summary>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.Get(System.String)">
            <summary>
            Gets the docuent for the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.Get(System.String[],System.String[])">
            <summary>
            Gets the results for the specified ids.
            </summary>
            <param name="ids">The ids.</param>
            <param name="includes">The includes.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.Put(System.String,System.Nullable{System.Guid},Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Puts the document with the specified key in the database
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
            <param name="document">The document.</param>
            <param name="metadata">The metadata.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.Delete(System.String,System.Nullable{System.Guid})">
            <summary>
            Deletes the document with the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.PutAttachment(System.String,System.Nullable{System.Guid},System.Byte[],Newtonsoft.Json.Linq.JObject)">
            <summary>
            Puts the attachment with the specified key
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
            <param name="data">The data.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.GetAttachment(System.String)">
            <summary>
            Gets the attachment by the specified key
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.DeleteAttachment(System.String,System.Nullable{System.Guid})">
            <summary>
            Deletes the attachment with the specified key
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.GetIndexNames(System.Int32,System.Int32)">
            <summary>
            Gets the index names from the server
            </summary>
            <param name="start">Paging start</param>
            <param name="pageSize">Size of the page.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.ResetIndex(System.String)">
            <summary>
            Resets the specified index
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.GetIndex(System.String)">
            <summary>
            Gets the index definition for the specified name
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.PutIndex(System.String,Raven.Database.Indexing.IndexDefinition)">
            <summary>
            Puts the index definition for the specified name
            </summary>
            <param name="name">The name.</param>
            <param name="indexDef">The index def.</param>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.PutIndex``2(System.String,Raven.Client.Indexes.IndexDefinition{``0,``1})">
            <summary>
            Puts the index definition for the specified name
            </summary>
            <typeparam name="TDocument">The type of the document.</typeparam>
            <typeparam name="TReduceResult">The type of the reduce result.</typeparam>
            <param name="name">The name.</param>
            <param name="indexDef">The index def.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.PutIndex(System.String,Raven.Database.Indexing.IndexDefinition,System.Boolean)">
            <summary>
            Puts the index for the specified name
            </summary>
            <param name="name">The name.</param>
            <param name="indexDef">The index def.</param>
            <param name="overwrite">if set to <c>true</c> [overwrite].</param>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.PutIndex``2(System.String,Raven.Client.Indexes.IndexDefinition{``0,``1},System.Boolean)">
            <summary>
            Puts the index for the specified name
            </summary>
            <typeparam name="TDocument">The type of the document.</typeparam>
            <typeparam name="TReduceResult">The type of the reduce result.</typeparam>
            <param name="name">The name.</param>
            <param name="indexDef">The index def.</param>
            <param name="overwrite">if set to <c>true</c> [overwrite].</param>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.Query(System.String,Raven.Database.Data.IndexQuery,System.String[])">
            <summary>
            Queries the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="query">The query.</param>
            <param name="includes">The includes.</param>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.DeleteIndex(System.String)">
            <summary>
            Deletes the index.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.Batch(Raven.Database.Data.ICommandData[])">
            <summary>
            Executed the specified commands as a single batch
            </summary>
            <param name="commandDatas">The command datas.</param>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.Commit(System.Guid)">
            <summary>
            Commits the specified tx id.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.Rollback(System.Guid)">
            <summary>
            Rollbacks the specified tx id.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.PromoteTransaction(System.Guid)">
            <summary>
            Promotes the transaction.
            </summary>
            <param name="fromTxId">From tx id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.StoreRecoveryInformation(System.Guid,System.Guid,System.Byte[])">
            <summary>
            Stores the recovery information.
            </summary>
            <param name="resourceManagerId">The resource manager Id for this transaction</param>
            <param name="txId">The tx id.</param>
            <param name="recoveryInformation">The recovery information.</param>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.With(System.Net.ICredentials)">
            <summary>
            Returns a new <see cref="T:Raven.Client.Client.IDatabaseCommands"/> using the specified credentials
            </summary>
            <param name="credentialsForSession">The credentials for session.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.DeleteByIndex(System.String,Raven.Database.Data.IndexQuery,System.Boolean)">
            <summary>
            Perform a set based deletes using the specified index.
            </summary>
            <param name="indexName">Name of the index.</param>
            <param name="queryToDelete">The query to delete.</param>
            <param name="allowStale">if set to <c>true</c> [allow stale].</param>
        </member>
        <member name="M:Raven.Client.Client.IDatabaseCommands.UpdateByIndex(System.String,Raven.Database.Data.IndexQuery,Raven.Database.Json.PatchRequest[],System.Boolean)">
            <summary>
            Perform a set based update using the specified index.
            </summary>
            <param name="indexName">Name of the index.</param>
            <param name="queryToUpdate">The query to update.</param>
            <param name="patchRequests">The patch requests.</param>
            <param name="allowStale">if set to <c>true</c> [allow stale].</param>
        </member>
        <member name="P:Raven.Client.Client.IDatabaseCommands.OperationsHeaders">
            <summary>
            Gets or sets the operations headers.
            </summary>
            <value>The operations headers.</value>
        </member>
        <member name="P:Raven.Client.Client.IDatabaseCommands.SupportsPromotableTransactions">
            <summary>
            Gets a value indicating whether [supports promotable transactions].
            </summary>
            <value>
            	<c>true</c> if [supports promotable transactions]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Raven.Client.Client.JsonExtensions">
            <summary>
            Extension to json objects
            </summary>
        </member>
        <member name="M:Raven.Client.Client.JsonExtensions.Deserialize``1(Newtonsoft.Json.Linq.JObject,Raven.Client.Document.DocumentConvention)">
            <summary>
            Deserializes the specified instance <param name="self"/> to an instance of <typeparam name="T"/> using the specified <param name="convention"/>
            </summary>
        </member>
        <member name="M:Raven.Client.Client.JsonExtensions.Deserialize(Newtonsoft.Json.Linq.JObject,System.Type,Raven.Client.Document.DocumentConvention)">
            <summary>
            Deserializes the specified instance <param name="self"/> to an instance of <param name="type"/> using the specified <param name="convention"/>
            </summary>
        </member>
        <member name="T:Raven.Database.Json.JsonLuceneDateTimeConverter">
            <summary>
            Convert a lucene data format to and from json values
            </summary>
        </member>
        <member name="M:Raven.Database.Json.JsonLuceneDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Raven.Database.Json.JsonLuceneDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Raven.Database.Json.JsonLuceneDateTimeConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Raven.Database.Json.JsonLuceneDateTimeConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON.
            </summary>
            <value>
            	<c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Raven.Client.Client.RavenQuery">
            <summary>
            Helper class that provide a way to escape query terms
            </summary>
        </member>
        <member name="M:Raven.Client.Client.RavenQuery.Escape(System.String)">
            <summary>
            Escapes Lucene operators and quotes phrases
            </summary>
        </member>
        <member name="M:Raven.Client.Client.RavenQuery.Escape(System.String,System.Boolean)">
            <summary>
            Escapes Lucene operators and quotes phrases
            </summary>
            <param name="term"></param>
            <param name="allowWildcards"></param>
            <returns>escaped term</returns>
            <remarks>
            http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Escaping%20Special%20Characters
            </remarks>
        </member>
        <member name="T:Raven.Client.Client.RavenTransactionAccessor">
            <summary>
            Provide access to the current transaction 
            </summary>
        </member>
        <member name="M:Raven.Client.Client.RavenTransactionAccessor.StartTransaction">
            <summary>
            Starts a transaction
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.RavenTransactionAccessor.StartTransaction(System.TimeSpan)">
            <summary>
            Starts a transaction with the specified timeout
            </summary>
            <param name="timeout">The timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.RavenTransactionAccessor.GetTransactionInformation">
            <summary>
            Gets the transaction information for the current transaction
            </summary>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.Client.ReplicationInformer">
            <summary>
            Replication and failover management on the client side
            </summary>
        </member>
        <member name="M:Raven.Client.Client.ReplicationInformer.UpdateReplicationInformationIfNeeded(Raven.Client.Client.ServerClient)">
            <summary>
            Updates the replication information if needed.
            </summary>
            <param name="serverClient">The server client.</param>
        </member>
        <member name="M:Raven.Client.Client.ReplicationInformer.ShouldExecuteUsing(System.String,System.Int32)">
            <summary>
            Should execute the operation using the specified operation URL
            </summary>
            <param name="operationUrl">The operation URL.</param>
            <param name="currentRequest">The current request.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.ReplicationInformer.IsFirstFailure(System.String)">
            <summary>
            Determines whether this is the first failure on the specified operation URL.
            </summary>
            <param name="operationUrl">The operation URL.</param>
        </member>
        <member name="M:Raven.Client.Client.ReplicationInformer.IncrementFailureCount(System.String)">
            <summary>
            Increments the failure count for the specified operation URL
            </summary>
            <param name="operationUrl">The operation URL.</param>
        </member>
        <member name="M:Raven.Client.Client.ReplicationInformer.RefreshReplicationInformation(Raven.Client.Client.ServerClient)">
            <summary>
            Refreshes the replication information.
            </summary>
            <param name="commands">The commands.</param>
        </member>
        <member name="M:Raven.Client.Client.ReplicationInformer.ResetFailureCount(System.String)">
            <summary>
            Resets the failure count for the specified URL
            </summary>
            <param name="operationUrl">The operation URL.</param>
        </member>
        <member name="P:Raven.Client.Client.ReplicationInformer.ReplicationDestinations">
            <summary>
            Gets the replication destinations.
            </summary>
            <value>The replication destinations.</value>
        </member>
        <member name="T:Raven.Client.Client.ServerClient">
            <summary>
            Access the RavenDB operations using HTTP
            </summary>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.#ctor(System.String,Raven.Client.Document.DocumentConvention,System.Net.ICredentials,Raven.Client.Client.ReplicationInformer)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Client.ServerClient"/> class.
            </summary>
            <param name="url">The URL.</param>
            <param name="convention">The convention.</param>
            <param name="credentials">The credentials.</param>
            <param name="replicationInformer">The replication informer.</param>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.Get(System.String)">
            <summary>
            Gets the docuent for the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.DirectGet(System.String,System.String)">
            <summary>
            Perform a direct get for a document with the specified key on the sepcified server URL.
            </summary>
            <param name="serverUrl">The server URL.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.Put(System.String,System.Nullable{System.Guid},Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Puts the document with the specified key in the database
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
            <param name="document">The document.</param>
            <param name="metadata">The metadata.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.Delete(System.String,System.Nullable{System.Guid})">
            <summary>
            Deletes the document with the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.PutAttachment(System.String,System.Nullable{System.Guid},System.Byte[],Newtonsoft.Json.Linq.JObject)">
            <summary>
            Puts the attachment with the specified key
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
            <param name="data">The data.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.GetAttachment(System.String)">
            <summary>
            Gets the attachment by the specified key
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.DeleteAttachment(System.String,System.Nullable{System.Guid})">
            <summary>
            Deletes the attachment with the specified key
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.GetIndexNames(System.Int32,System.Int32)">
            <summary>
            Gets the index names from the server
            </summary>
            <param name="start">Paging start</param>
            <param name="pageSize">Size of the page.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.ResetIndex(System.String)">
            <summary>
            Resets the specified index
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.GetIndex(System.String)">
            <summary>
            Gets the index definition for the specified name
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.PutIndex(System.String,Raven.Database.Indexing.IndexDefinition)">
            <summary>
            Puts the index.
            </summary>
            <param name="name">The name.</param>
            <param name="definition">The definition.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.PutIndex(System.String,Raven.Database.Indexing.IndexDefinition,System.Boolean)">
            <summary>
            Puts the index.
            </summary>
            <param name="name">The name.</param>
            <param name="definition">The definition.</param>
            <param name="overwrite">if set to <c>true</c> [overwrite].</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.PutIndex``2(System.String,Raven.Client.Indexes.IndexDefinition{``0,``1})">
            <summary>
            Puts the index definition for the specified name
            </summary>
            <typeparam name="TDocument">The type of the document.</typeparam>
            <typeparam name="TReduceResult">The type of the reduce result.</typeparam>
            <param name="name">The name.</param>
            <param name="indexDef">The index def.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.PutIndex``2(System.String,Raven.Client.Indexes.IndexDefinition{``0,``1},System.Boolean)">
            <summary>
            Puts the index for the specified name
            </summary>
            <typeparam name="TDocument">The type of the document.</typeparam>
            <typeparam name="TReduceResult">The type of the reduce result.</typeparam>
            <param name="name">The name.</param>
            <param name="indexDef">The index def.</param>
            <param name="overwrite">if set to <c>true</c> [overwrite].</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.Query(System.String,Raven.Database.Data.IndexQuery,System.String[])">
            <summary>
            Queries the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="query">The query.</param>
            <param name="includes">The includes.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.DeleteIndex(System.String)">
            <summary>
            Deletes the index.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.Get(System.String[],System.String[])">
            <summary>
            Gets the results for the specified ids.
            </summary>
            <param name="ids">The ids.</param>
            <param name="includes">The includes.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.DirectGet(System.String[],System.String,System.String[])">
            <summary>
            Perform a direct get for loading multiple ids in one request
            </summary>
            <param name="ids">The ids.</param>
            <param name="operationUrl">The operation URL.</param>
            <param name="includes">The includes.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.Batch(Raven.Database.Data.ICommandData[])">
            <summary>
            Executed the specified commands as a single batch
            </summary>
            <param name="commandDatas">The command datas.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.Commit(System.Guid)">
            <summary>
            Commits the specified tx id.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.Rollback(System.Guid)">
            <summary>
            Rollbacks the specified tx id.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.PromoteTransaction(System.Guid)">
            <summary>
            Promotes the transaction.
            </summary>
            <param name="fromTxId">From tx id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.StoreRecoveryInformation(System.Guid,System.Guid,System.Byte[])">
            <summary>
            Stores the recovery information.
            </summary>
            <param name="resourceManagerId">The resource manager Id for this transaction</param>
            <param name="txId">The tx id.</param>
            <param name="recoveryInformation">The recovery information.</param>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.With(System.Net.ICredentials)">
            <summary>
            Returns a new <see cref="T:Raven.Client.Client.IDatabaseCommands"/> using the specified credentials
            </summary>
            <param name="credentialsForSession">The credentials for session.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.DeleteByIndex(System.String,Raven.Database.Data.IndexQuery,System.Boolean)">
            <summary>
            Perform a set based deletes using the specified index.
            </summary>
            <param name="indexName">Name of the index.</param>
            <param name="queryToDelete">The query to delete.</param>
            <param name="allowStale">if set to <c>true</c> [allow stale].</param>
        </member>
        <member name="M:Raven.Client.Client.ServerClient.UpdateByIndex(System.String,Raven.Database.Data.IndexQuery,Raven.Database.Json.PatchRequest[],System.Boolean)">
            <summary>
            Perform a set based update using the specified index.
            </summary>
            <param name="indexName">Name of the index.</param>
            <param name="queryToUpdate">The query to update.</param>
            <param name="patchRequests">The patch requests.</param>
            <param name="allowStale">if set to <c>true</c> [allow stale].</param>
        </member>
        <member name="P:Raven.Client.Client.ServerClient.OperationsHeaders">
            <summary>
            Gets or sets the operations headers.
            </summary>
            <value>The operations headers.</value>
        </member>
        <member name="P:Raven.Client.Client.ServerClient.SupportsPromotableTransactions">
            <summary>
            Gets a value indicating whether [supports promotable transactions].
            </summary>
            <value>
            	<c>true</c> if [supports promotable transactions]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Raven.Client.Client.ServerClient.Url">
            <summary>
            Gets the URL.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="T:Raven.Client.Client.WebRequestEventArgs">
            <summary>
            Event args for the event of creating a <see cref="T:System.Net.WebRequest"/>
            </summary>
        </member>
        <member name="P:Raven.Client.Client.WebRequestEventArgs.Request">
            <summary>
            Gets or sets the web request.
            </summary>
            <value>The request.</value>
        </member>
        <member name="T:Raven.Client.Client.WebResponseExtensions">
            <summary>
            Extensions for web requests
            </summary>
        </member>
        <member name="M:Raven.Client.Client.WebResponseExtensions.GetResponseStreamWithHttpDecompression(System.Net.WebResponse)">
            <summary>
            Gets the response stream with HTTP decompression.
            </summary>
            <param name="response">The response.</param>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.Document.Async.AsyncDocumentSession">
            <summary>
            Implementation for async document session 
            </summary>
        </member>
        <member name="T:Raven.Client.Document.InMemoryDocumentSessionOperations">
            <summary>
            Abstract implementation for in memory session operations
            </summary>
        </member>
        <member name="T:Raven.Client.IInMemoryDocumentSessionOperations">
            <summary>
            This interface expose a set of operations that are perfomed entirely in memory.
            </summary>
        </member>
        <member name="M:Raven.Client.IInMemoryDocumentSessionOperations.Store(System.Object)">
            <summary>
            Stores the specified entity in the session. The entity will be saved when <see cref="M:Raven.Client.IDocumentSession.SaveChanges"/> is called.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.IInMemoryDocumentSessionOperations.Delete``1(``0)">
            <summary>
            Marks the specified entity for deletion. The entity will be deleted when <see cref="M:Raven.Client.IDocumentSession.SaveChanges"/> is called.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.IInMemoryDocumentSessionOperations.Evict``1(``0)">
            <summary>
            Evicts the specified entity from the session.
            Remove the entity from the delete queue and stops tracking changes for this entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.IInMemoryDocumentSessionOperations.Clear">
            <summary>
            Clears this instance.
            Remove all entities from the delete queue and stops tracking changes for all entities.
            </summary>
        </member>
        <member name="M:Raven.Client.IInMemoryDocumentSessionOperations.GetMetadataFor``1(``0)">
            <summary>
            Gets the metadata for the specified entity.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IInMemoryDocumentSessionOperations.GetDocumentId(System.Object)">
            <summary>
            Gets the document id for the specified entity.
            </summary>
            <remarks>
            This function may return <c>null</c> if the entity isn't tracked by the session, or if the entity is 
            a new entity with a key that should be generated on the server. 
            </remarks>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.IInMemoryDocumentSessionOperations.HasChanged(System.Object)">
            <summary>
            Determines whether the specified entity has changed.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            	<c>true</c> if the specified entity has changed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Raven.Client.IInMemoryDocumentSessionOperations.StoreIdentifier">
            <summary>
            Gets the store identifier for this session.
            The store identifier is the identifier for the particular RavenDB instance. 
            This is mostly useful when using sharding.
            </summary>
            <value>The store identifier.</value>
        </member>
        <member name="P:Raven.Client.IInMemoryDocumentSessionOperations.UseOptimisticConcurrency">
            <summary>
            Gets or sets a value indicating whether the session should use optimistic concurrency.
            When set to <c>true</c>, a check is made so that a change made behind the session back would fail
            and raise <see cref="T:Raven.Database.Exceptions.ConcurrencyException"/>.
            </summary>
        </member>
        <member name="P:Raven.Client.IInMemoryDocumentSessionOperations.AllowNonAuthoritiveInformation">
            <summary>
            Gets or sets a value indicating whether non authoritive information is allowed.
            Non authoritive information is document that has been modified by a transaction that hasn't been committed.
            The server provides the latest committed version, but it is known that attempting to write to a non authoritive document
            will fail, because it is already modified.
            If set to <c>false</c>, the session will wait <see cref="P:Raven.Client.IInMemoryDocumentSessionOperations.NonAuthoritiveInformationTimeout"/> for the transaction to commit to get an
            authoritive information. If the wait is longer than <see cref="P:Raven.Client.IInMemoryDocumentSessionOperations.NonAuthoritiveInformationTimeout"/>, <see cref="T:Raven.Client.Exceptions.NonAuthoritiveInformationException"/> is thrown.
            </summary>
            <value>
            	<c>true</c> if non authoritive information is allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Raven.Client.IInMemoryDocumentSessionOperations.NonAuthoritiveInformationTimeout">
            <summary>
            Gets or sets the timeout to wait for authoritive information if encountered non authoritive document.
            </summary>
        </member>
        <member name="P:Raven.Client.IInMemoryDocumentSessionOperations.Conventions">
            <summary>
            Gets the conventions used by this session
            </summary>
            <remarks>
            This instance is shared among all sessions, changes to the <see cref="T:Raven.Client.Document.DocumentConvention"/> should be done
            via the <see cref="T:Raven.Client.IDocumentStore"/> instance, not on a single session.
            </remarks>
            <value>The conventions.</value>
        </member>
        <member name="P:Raven.Client.IInMemoryDocumentSessionOperations.MaxNumberOfRequestsPerSession">
            <summary>
            Gets or sets the max number of requests per session.
            If the <see cref="P:Raven.Client.IInMemoryDocumentSessionOperations.NumberOfRequests"/> rise above <see cref="P:Raven.Client.IInMemoryDocumentSessionOperations.MaxNumberOfRequestsPerSession"/>, an exception will be thrown.
            </summary>
            <value>The max number of requests per session.</value>
        </member>
        <member name="P:Raven.Client.IInMemoryDocumentSessionOperations.NumberOfRequests">
            <summary>
            Gets the number of requests for this session
            </summary>
        </member>
        <member name="E:Raven.Client.IInMemoryDocumentSessionOperations.Stored">
            <summary>
            Occurs after an entity is stored in RavenDB.
            This event is raised for new and updated entities.
            </summary>
        </member>
        <member name="E:Raven.Client.IInMemoryDocumentSessionOperations.OnEntityConverted">
            <summary>
            Occurs when an entity is converted to a document and metadata.
            Changes made to the document / metadata instances passed to this event will be persisted.
            </summary>
        </member>
        <member name="P:Raven.Client.IInMemoryDocumentSessionOperations.HasChanges">
            <summary>
            Gets a value indicating whether any of the entities tracked by the session has changes.
            </summary>
        </member>
        <member name="F:Raven.Client.Document.InMemoryDocumentSessionOperations.deletedEntities">
            <summary>
            The entities waiting to be deleted
            </summary>
        </member>
        <member name="F:Raven.Client.Document.InMemoryDocumentSessionOperations.entitiesAndMetadata">
            <summary>
            hold the data required to manage the data for RavenDB's Unit of Work
            </summary>
        </member>
        <member name="F:Raven.Client.Document.InMemoryDocumentSessionOperations.entitiesByKey">
            <summary>
            Translate between a key and its associated entity
            </summary>
        </member>
        <member name="F:Raven.Client.Document.InMemoryDocumentSessionOperations.documentStore">
            <summary>
            The document store associated with this session
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.#ctor(Raven.Client.Document.DocumentStore,Raven.Client.IDocumentStoreListener[],Raven.Client.IDocumentDeleteListener[])">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.InMemoryDocumentSessionOperations"/> class.
            </summary>
            <param name="documentStore">The document store.</param>
            <param name="storeListeners">The store listeners.</param>
            <param name="deleteListeners">The delete listeners.</param>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.GetMetadataFor``1(``0)">
            <summary>
            Gets the metadata for the specified entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.GetDocumentId(System.Object)">
            <summary>
            Gets the document id.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.HasChanged(System.Object)">
            <summary>
            Determines whether the specified entity has changed.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            	<c>true</c> if the specified entity has changed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.TrackEntity``1(Raven.Database.JsonDocument)">
            <summary>
            Tracks the entity inside the unit of work
            </summary>
            <typeparam name="T"></typeparam>
            <param name="documentFound">The document found.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.TrackEntity``1(System.String,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Tracks the entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="document">The document.</param>
            <param name="metadata">The metadata.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Delete``1(``0)">
            <summary>
            Marks the specified entity for deletion. The entity will be deleted when <see cref="M:Raven.Client.IDocumentSession.SaveChanges"/> is called.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.ConvertToEntity``1(System.String,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Converts the json document to an entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id">The id.</param>
            <param name="documentFound">The document found.</param>
            <param name="metadata">The metadata.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.TrySetIdentity``1(``0,System.String)">
            <summary>
            Tries to set the identity property
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Store(System.Object)">
            <summary>
            Stores the specified entity in the session. The entity will be saved when <see cref="M:Raven.Client.IDocumentSession.SaveChanges"/> is called.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.TryGetIdentity(System.Object,System.String)">
            <summary>
            Tries to get the identity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.CreatePutEntityCommand(System.Object,Raven.Client.Document.DocumentSession.DocumentMetadata)">
            <summary>
            Creates the put entity command.
            </summary>
            <param name="entity">The entity.</param>
            <param name="documentMetadata">The document metadata.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.UpdateBatchResults(System.Collections.Generic.IList{Raven.Database.BatchResult},System.Collections.Generic.IList{System.Object})">
            <summary>
            Updates the batch results.
            </summary>
            <param name="batchResults">The batch results.</param>
            <param name="entities">The entities.</param>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.PrepareForSaveChanges">
            <summary>
            Prepares for save changes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.EntityChanged(System.Object,Raven.Client.Document.DocumentSession.DocumentMetadata)">
            <summary>
            Determines if the entity have changed.
            </summary>
            <param name="entity">The entity.</param>
            <param name="documentMetadata">The document metadata.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Evict``1(``0)">
            <summary>
            Evicts the specified entity from the session.
            Remove the entity from the delete queue and stops tracking changes for this entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Clear">
            <summary>
            Clears this instance.
            Remove all entities from the delete queue and stops tracking changes for all entities.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Commit(System.Guid)">
            <summary>
            Commits the specified tx id.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Rollback(System.Guid)">
            <summary>
            Rollbacks the specified tx id.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.PromoteTransaction(System.Guid)">
            <summary>
            Promotes the transaction.
            </summary>
            <param name="fromTxId">From tx id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.ClearEnlistment">
            <summary>
            Clears the enlistment.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.NumberOfRequests">
            <summary>
            Gets the number of requests for this session
            </summary>
            <value></value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.NonAuthoritiveInformationTimeout">
            <summary>
            Gets or sets the timeout to wait for authoritive information if encountered non authoritive document.
            </summary>
            <value></value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.StoreIdentifier">
            <summary>
            Gets the store identifier for this session.
            The store identifier is the identifier for the particular RavenDB instance.
            This is mostly useful when using sharding.
            </summary>
            <value>The store identifier.</value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.Conventions">
            <summary>
            Gets the conventions used by this session
            </summary>
            <value>The conventions.</value>
            <remarks>
            This instance is shared among all sessions, changes to the <see cref="T:Raven.Client.Document.DocumentConvention"/> should be done
            via the <see cref="T:Raven.Client.IDocumentStore"/> instance, not on a single session.
            </remarks>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.ResourceManagerId">
            <summary>
            The transaction resource manager identifer
            </summary>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.MaxNumberOfRequestsPerSession">
            <summary>
            Gets or sets the max number of requests per session.
            If the <see cref="P:Raven.Client.Document.InMemoryDocumentSessionOperations.NumberOfRequests"/> rise above <see cref="P:Raven.Client.Document.InMemoryDocumentSessionOperations.MaxNumberOfRequestsPerSession"/>, an exception will be thrown.
            </summary>
            <value>The max number of requests per session.</value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.UseOptimisticConcurrency">
            <summary>
            Gets or sets a value indicating whether the session should use optimistic concurrency.
            When set to <c>true</c>, a check is made so that a change made behind the session back would fail
            and raise <see cref="T:Raven.Database.Exceptions.ConcurrencyException"/>.
            </summary>
            <value></value>
        </member>
        <member name="E:Raven.Client.Document.InMemoryDocumentSessionOperations.Stored">
            <summary>
            Occurs when an entity is stored in the session
            </summary>
        </member>
        <member name="E:Raven.Client.Document.InMemoryDocumentSessionOperations.OnEntityConverted">
            <summary>
            Occurs when an entity is converted to a document and metadata.
            Changes made to the document / metadata instances passed to this event will be persisted.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.HasChanges">
            <summary>
            Gets a value indicating whether any of the entities tracked by the session has changes.
            </summary>
            <value></value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.AllowNonAuthoritiveInformation">
            <summary>
            Gets or sets a value indicating whether non authoritive information is allowed.
            Non authoritive information is document that has been modified by a transaction that hasn't been committed.
            The server provides the latest committed version, but it is known that attempting to write to a non authoritive document
            will fail, because it is already modified.
            If set to <c>false</c>, the session will wait <see cref="P:Raven.Client.Document.InMemoryDocumentSessionOperations.NonAuthoritiveInformationTimeout"/> for the transaction to commit to get an
            authoritive information. If the wait is longer than <see cref="P:Raven.Client.Document.InMemoryDocumentSessionOperations.NonAuthoritiveInformationTimeout"/>, <see cref="T:Raven.Client.Exceptions.NonAuthoritiveInformationException"/> is thrown.
            </summary>
            <value>
            	<c>true</c> if non authoritive information is allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Raven.Client.IAsyncDocumentSession">
            <summary>
            Interface for document session using async approaches
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.BeginLoad(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins the aysnc load operation
            </summary>
            <param name="id">The id.</param>
            <param name="asyncCallback">The async callback.</param>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.EndLoad``1(System.IAsyncResult)">
            <summary>
            Ends the async load operation
            </summary>
            <typeparam name="T"></typeparam>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.BeginMultiLoad(System.String[],System.AsyncCallback,System.Object)">
            <summary>
            Begins the async multi load operation
            </summary>
            <param name="ids">The ids.</param>
            <param name="asyncCallback">The async callback.</param>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.EndMultiLoad``1(System.IAsyncResult)">
            <summary>
            Ends the async multi load operation
            </summary>
            <typeparam name="T"></typeparam>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.BeginSaveChanges(System.AsyncCallback,System.Object)">
            <summary>
            Begins the async save changes operation
            </summary>
            <param name="asyncCallback">The async callback.</param>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.EndSaveChanges(System.IAsyncResult)">
            <summary>
            Ends the async save changes operation
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="P:Raven.Client.IAsyncDocumentSession.AsyncDatabaseCommands">
            <summary>
            Gets the async database commands.
            </summary>
            <value>The async database commands.</value>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.#ctor(Raven.Client.Document.DocumentStore,Raven.Client.IDocumentStoreListener[],Raven.Client.IDocumentDeleteListener[])">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.Async.AsyncDocumentSession"/> class.
            </summary>
            <param name="documentStore">The document store.</param>
            <param name="storeListeners">The store listeners.</param>
            <param name="deleteListeners">The delete listeners.</param>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.BeginLoad(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins the aysnc load operation
            </summary>
            <param name="id">The id.</param>
            <param name="asyncCallback">The async callback.</param>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.EndLoad``1(System.IAsyncResult)">
            <summary>
            Ends the async load operation
            </summary>
            <typeparam name="T"></typeparam>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.BeginMultiLoad(System.String[],System.AsyncCallback,System.Object)">
            <summary>
            Begins the async multi load operation
            </summary>
            <param name="ids">The ids.</param>
            <param name="asyncCallback">The async callback.</param>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.EndMultiLoad``1(System.IAsyncResult)">
            <summary>
            Ends the async multi load operation
            </summary>
            <typeparam name="T"></typeparam>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.BeginSaveChanges(System.AsyncCallback,System.Object)">
            <summary>
            Begins the async save changes operation
            </summary>
            <param name="asyncCallback">The async callback.</param>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.EndSaveChanges(System.IAsyncResult)">
            <summary>
            Ends the async save changes operation
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.Commit(System.Guid)">
            <summary>
            Commits the specified tx id.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.Rollback(System.Guid)">
            <summary>
            Rollbacks the specified tx id.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.PromoteTransaction(System.Guid)">
            <summary>
            Promotes the transaction.
            </summary>
            <param name="fromTxId">From tx id.</param>
            <returns></returns>
        </member>
        <member name="P:Raven.Client.Document.Async.AsyncDocumentSession.AsyncDatabaseCommands">
            <summary>
            Gets the async database commands.
            </summary>
            <value>The async database commands.</value>
        </member>
        <member name="T:Raven.Client.Document.Async.SyncronousLoadResult">
            <summary>
            An <see cref="T:System.IAsyncResult"/> for a syncronous load
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Async.SyncronousLoadResult.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.Async.SyncronousLoadResult"/> class.
            </summary>
            <param name="state">The state.</param>
            <param name="entity">The entity.</param>
        </member>
        <member name="P:Raven.Client.Document.Async.SyncronousLoadResult.Entity">
            <summary>
            Gets the entity.
            </summary>
            <value>The entity.</value>
        </member>
        <member name="P:Raven.Client.Document.Async.SyncronousLoadResult.IsCompleted">
            <summary>
            Gets a value that indicates whether the asynchronous operation has completed.
            </summary>
            <value></value>
            <returns>true if the operation is complete; otherwise, false.</returns>
        </member>
        <member name="P:Raven.Client.Document.Async.SyncronousLoadResult.AsyncWaitHandle">
            <summary>
            Gets a <see cref="T:System.Threading.WaitHandle"/> that is used to wait for an asynchronous operation to complete.
            </summary>
            <value></value>
            <returns>A <see cref="T:System.Threading.WaitHandle"/> that is used to wait for an asynchronous operation to complete.</returns>
        </member>
        <member name="P:Raven.Client.Document.Async.SyncronousLoadResult.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
            <value></value>
            <returns>A user-defined object that qualifies or contains information about an asynchronous operation.</returns>
        </member>
        <member name="P:Raven.Client.Document.Async.SyncronousLoadResult.CompletedSynchronously">
            <summary>
            Gets a value that indicates whether the asynchronous operation completed synchronously.
            </summary>
            <value></value>
            <returns>true if the asynchronous operation completed synchronously; otherwise, false.</returns>
        </member>
        <member name="T:Raven.Client.Document.DocumentConvention">
            <summary>
            The set of conventions used by the <see cref="T:Raven.Client.Document.DocumentStore"/> which allow the users to customize
            the way the Raven client API behaves
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.DocumentConvention"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.GenerateDocumentKeyUsingIdentity(Raven.Client.Document.DocumentConvention,System.Object)">
            <summary>
            Generates the document key using identity.
            </summary>
            <param name="conventions">The conventions.</param>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.DefaultTypeTagName(System.Type)">
            <summary>
            Get the default tag name for the specified type.
            </summary>
            <param name="t">The t.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.GetTypeTagName(System.Type)">
            <summary>
            Gets the name of the type tag.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.GenerateDocumentKey(System.Object)">
            <summary>
            Generates the document key.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.GetIdentityProperty(System.Type)">
            <summary>
            Gets the identity property.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.CreateSerializer">
            <summary>
            Creates the serializer.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.CustomizeJsonSerializer">
            <summary>
            Register an action to customize the json serializer used by the <see cref="T:Raven.Client.Document.DocumentStore"/>
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.IdentityPartsSeparator">
            <summary>
            Gets or sets the identity parts separator used by the hilo generators
            </summary>
            <value>The identity parts separator.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.MaxNumberOfRequestsPerSession">
            <summary>
            Gets or sets the default max number of requests per session.
            </summary>
            <value>The max number of requests per session.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.JsonContractResolver">
            <summary>
            Gets or sets the json contract resolver.
            </summary>
            <value>The json contract resolver.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindTypeTagName">
            <summary>
            Gets or sets the function to find the type tag.
            </summary>
            <value>The name of the find type tag.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindIdentityProperty">
            <summary>
            Gets or sets the function to find the identity property.
            </summary>
            <value>The find identity property.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.DocumentKeyGenerator">
            <summary>
            Gets or sets the document key generator.
            </summary>
            <value>The document key generator.</value>
        </member>
        <member name="T:Raven.Client.Document.DefaultRavenContractResolver">
            <summary>
            The default json contract will serialize all properties and all public fields
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DefaultRavenContractResolver.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.DefaultRavenContractResolver"/> class.
            </summary>
            <param name="shareCache">If set to <c>true</c> the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver"/> will use a cached shared with other resolvers of the same type.
            Sharing the cache will significantly performance because expensive reflection will only happen once but could cause unexpected
            behavior if different instances of the resolver are suppose to produce different results. When set to false it is highly
            recommended to reuse <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver"/> instances with the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.</param>
        </member>
        <member name="M:Raven.Client.Document.DefaultRavenContractResolver.GetSerializableMembers(System.Type)">
            <summary>
            Gets the serializable members for the type.
            </summary>
            <param name="objectType">The type to get serializable members for.</param>
            <returns>The serializable members for the type.</returns>
        </member>
        <member name="T:Raven.Client.Document.DocumentQuery`1">
            <summary>
            A query against a Raven index
            </summary>
        </member>
        <member name="T:Raven.Client.IDocumentQuery`1">
            <summary>
            A query against a Raven index
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.Include(System.String)">
            <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.Take(System.Int32)">
            <summary>
            Takes the specified count.
            </summary>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.Skip(System.Int32)">
            <summary>
            Skips the specified count.
            </summary>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.Where(System.String)">
            <summary>
            Filter the results from the index using the specified where clause.
            </summary>
            <param name="whereClause">The where clause.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.WhereEquals(System.String,System.Object)">
            <summary>
            	Matches exact value
            </summary>
            <remarks>
            	Defaults to NotAnalyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.WhereEquals(System.String,System.Object,System.Boolean)">
            <summary>
            	Matches exact value
            </summary>
            <remarks>
            	Defaults to allow wildcards only if analyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.WhereEquals(System.String,System.Object,System.Boolean,System.Boolean)">
            <summary>
            	Matches exact value
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.WhereContains(System.String,System.Object)">
            <summary>
            	Matches substrings of the field
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.WhereStartsWith(System.String,System.Object)">
            <summary>
            Matches fields which starts with the specified value.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.WhereEndsWith(System.String,System.Object)">
            <summary>
            Matches fields which ends with the specified value.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.WhereBetween(System.String,System.Object,System.Object)">
            <summary>
            Matches fields where the value is between the specified start and end, exclusive
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.WhereBetweenOrEqual(System.String,System.Object,System.Object)">
            <summary>
            Matches fields where the value is between the specified start and end, inclusive
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.WhereGreaterThan(System.String,System.Object)">
            <summary>
            Matches fields where the value is greater than the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.WhereGreaterThanOrEqual(System.String,System.Object)">
            <summary>
            Matches fields where the value is greater than or equal to the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.WhereLessThan(System.String,System.Object)">
            <summary>
            Matches fields where the value is less than the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.WhereLessThanOrEqual(System.String,System.Object)">
            <summary>
            Matches fields where the value is less than or equal to the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.AndAlso">
            <summary>
            Add an AND to the query
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.OrElse">
            <summary>
            Add an OR to the query
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.Boost(System.Decimal)">
            <summary>
            Specifies a boost weight to the last where clause.
            The higher the boost factor, the more relevant the term will be.
            </summary>
            <param name="boost">boosting factor where 1.0 is default, less than 1.0 is lower weight, greater than 1.0 is higher weight</param>
            <returns></returns>
            <remarks>
            http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Boosting%20a%20Term
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.Fuzzy(System.Decimal)">
            <summary>
            Specifies a fuzziness factor to the single word term in the last where clause
            </summary>
            <param name="fuzzy">0.0 to 1.0 where 1.0 means closer match</param>
            <returns></returns>
            <remarks>
            http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Fuzzy%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.Proximity(System.Int32)">
            <summary>
            Specifies a proximity distance for the phrase in the last where clause
            </summary>
            <param name="proximity">number of words within</param>
            <returns></returns>
            <remarks>
            http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Proximity%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.WithinRadiusOf(System.Double,System.Double,System.Double)">
            <summary>
            Filter matches to be inside the specified radius
            </summary>
            <param name="radius">The radius.</param>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.OrderBy(System.String[])">
            <summary>
            Order the results by the specified fields
            </summary>
            <remarks>
            The fields are the names of the fields to sort, defaulting to sorting by ascending.
            You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </remarks>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.WaitForNonStaleResultsAsOfNow">
            <summary>
            Instructs the query to wait for non stale results as of now.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.WaitForNonStaleResultsAsOfNow(System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of now for the specified timeout.
            </summary>
            <param name="waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.WaitForNonStaleResultsAsOf(System.DateTime)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff date.
            </summary>
            <param name="cutOff">The cut off.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.WaitForNonStaleResultsAsOf(System.DateTime,System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff date for the specified timeout
            </summary>
            <param name="cutOff">The cut off.</param>
            <param name="waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.WaitForNonStaleResults">
            <summary>
            EXPERT ONLY: Instructs the query to wait for non stale results.
            This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.WaitForNonStaleResults(System.TimeSpan)">
            <summary>
            EXPERT ONLY: Instructs the query to wait for non stale results for the specified wait timeout.
            This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
            <param name="waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.SelectFields``1(System.String[])">
            <summary>
            Selects the specified fields directly from the index
            </summary>
            <typeparam name="TProjection">The type of the projection.</typeparam>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.AddOrder(System.String,System.Boolean)">
            <summary>
            Adds an ordering for a specific field to the query
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="descending">if set to <c>true</c> [descending].</param>
        </member>
        <member name="P:Raven.Client.IDocumentQuery`1.Not">
            <summary>
            Negate the next operation
            </summary>
        </member>
        <member name="P:Raven.Client.IDocumentQuery`1.QueryResult">
            <summary>
            Gets the query result
            Execute the query the first time that this is called.
            </summary>
            <value>The query result.</value>
        </member>
        <member name="F:Raven.Client.Document.DocumentQuery`1.projectionFields">
            <summary>
            The list of fields to project directly from the index
            </summary>
        </member>
        <member name="F:Raven.Client.Document.DocumentQuery`1.cutoff">
            <summary>
            The cutoff date to use for detecting staleness in the index
            </summary>
        </member>
        <member name="F:Raven.Client.Document.DocumentQuery`1.orderByFields">
            <summary>
            The fields to order the results by
            </summary>
        </member>
        <member name="F:Raven.Client.Document.DocumentQuery`1.pageSize">
            <summary>
            The page size to use when querying the index
            </summary>
        </member>
        <member name="F:Raven.Client.Document.DocumentQuery`1.start">
            <summary>
            which record to start reading from 
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.#ctor(Raven.Client.Document.DocumentSession,Raven.Client.Client.IDatabaseCommands,System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.DocumentQuery`1"/> class.
            </summary>
            <param name="session">The session.</param>
            <param name="databaseCommands">The database commands.</param>
            <param name="indexName">Name of the index.</param>
            <param name="projectionFields">The projection fields.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.#ctor(Raven.Client.Document.DocumentQuery{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.DocumentQuery`1"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.SelectFields``1(System.String[])">
            <summary>
            Selects the specified fields directly from the index
            </summary>
            <typeparam name="TProjection">The type of the projection.</typeparam>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WaitForNonStaleResults(System.TimeSpan)">
            <summary>
            Instruct the query to wait for non stale result for the specified wait timeout.
            </summary>
            <param name="waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.GetProjectionFields">
            <summary>
            Gets the fields for projection 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.AddOrder(System.String,System.Boolean)">
            <summary>
            Adds an ordering for a specific field to the query
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="descending">if set to <c>true</c> [descending].</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Include(System.String)">
            <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Take(System.Int32)">
            <summary>
            Takes the specified count.
            </summary>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Skip(System.Int32)">
            <summary>
            Skips the specified count.
            </summary>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Where(System.String)">
            <summary>
            Filter the results from the index using the specified where clause.
            </summary>
            <param name="whereClause">The where clause.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WhereEquals(System.String,System.Object)">
            <summary>
            	Matches exact value
            </summary>
            <remarks>
            	Defaults to NotAnalyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WhereEquals(System.String,System.Object,System.Boolean)">
            <summary>
            	Matches exact value
            </summary>
            <remarks>
            	Defaults to allow wildcards only if analyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WhereEquals(System.String,System.Object,System.Boolean,System.Boolean)">
            <summary>
            	Matches exact value
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WhereContains(System.String,System.Object)">
            <summary>
            	Matches substrings of the field
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WhereStartsWith(System.String,System.Object)">
            <summary>
            Matches fields which starts with the specified value.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WhereEndsWith(System.String,System.Object)">
            <summary>
            Matches fields which ends with the specified value.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WhereBetween(System.String,System.Object,System.Object)">
            <summary>
            Matches fields where the value is between the specified start and end, exclusive
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WhereBetweenOrEqual(System.String,System.Object,System.Object)">
            <summary>
            Matches fields where the value is between the specified start and end, inclusive
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WhereGreaterThan(System.String,System.Object)">
            <summary>
            Matches fields where the value is greater than the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WhereGreaterThanOrEqual(System.String,System.Object)">
            <summary>
            Matches fields where the value is greater than or equal to the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WhereLessThan(System.String,System.Object)">
            <summary>
            Matches fields where the value is less than the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WhereLessThanOrEqual(System.String,System.Object)">
            <summary>
            Matches fields where the value is less than or equal to the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.AndAlso">
            <summary>
            Add an AND to the query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.OrElse">
            <summary>
            Add an OR to the query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Boost(System.Decimal)">
            <summary>
            	Specifies a boost weight to the last where clause.
            	The higher the boost factor, the more relevant the term will be.
            </summary>
            <param name = "boost">boosting factor where 1.0 is default, less than 1.0 is lower weight, greater than 1.0 is higher weight</param>
            <returns></returns>
            <remarks>
            	http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Boosting%20a%20Term
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Fuzzy(System.Decimal)">
            <summary>
            	Specifies a fuzziness factor to the single word term in the last where clause
            </summary>
            <param name = "fuzzy">0.0 to 1.0 where 1.0 means closer match</param>
            <returns></returns>
            <remarks>
            	http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Fuzzy%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.Proximity(System.Int32)">
            <summary>
            	Specifies a proximity distance for the phrase in the last where clause
            </summary>
            <param name = "proximity">number of words within</param>
            <returns></returns>
            <remarks>
            	http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Proximity%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WithinRadiusOf(System.Double,System.Double,System.Double)">
            <summary>
            Filter matches to be inside the specified radius
            </summary>
            <param name="radius">The radius.</param>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.OrderBy(System.String[])">
            <summary>
            Order the results by the specified fields
            </summary>
            <remarks>
            The fields are the names of the fields to sort, defaulting to sorting by ascending.
            You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </remarks>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WaitForNonStaleResultsAsOfNow">
            <summary>
            Instructs the query to wait for non stale results as of now.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WaitForNonStaleResultsAsOfNow(System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of now for the specified timeout.
            </summary>
            <param name="waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WaitForNonStaleResultsAsOf(System.DateTime)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff date.
            </summary>
            <param name="cutOff">The cut off.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WaitForNonStaleResultsAsOf(System.DateTime,System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff date for the specified timeout
            </summary>
            <param name="cutOff">The cut off.</param>
            <param name="waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.WaitForNonStaleResults">
            <summary>
            EXPERT ONLY: Instructs the query to wait for non stale results.
            This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.GetQueryResult">
            <summary>
            Gets the query result.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.GenerateIndexQuery(System.String)">
            <summary>
            Generates the index query.
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentQuery`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Raven.Client.Document.DocumentQuery`1.QueryResult">
            <summary>
            Gets the query result
            Execute the query the first time that this is called.
            </summary>
            <value>The query result.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentQuery`1.Not">
            <summary>
            Negates the next operation
            </summary>
        </member>
        <member name="T:Raven.Client.Document.DocumentSession">
            <summary>
            Implements Unit of Work for accessing the RavenDB server
            </summary>
        </member>
        <member name="T:Raven.Client.IDocumentSession">
            <summary>
            Interface for document session
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Load``1(System.String)">
            <summary>
            Loads the specified entity with the specified id.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Load``1(System.String[])">
            <summary>
            Loads the specified entities with the specified ids.
            </summary>
            <param name="ids">The ids.</param>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Refresh``1(``0)">
            <summary>
            Refreshes the specified entity from Raven server.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Query``1(System.String)">
            <summary>
            Queries the specified index using Linq.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <param name="indexName">Name of the index.</param>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Query``2">
            <summary>
            Queries the index specified by <typeparamref name="TIndexCreator"/> using Linq.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <typeparam name="TIndexCreator">The type of the index creator.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentSession.LuceneQuery``1(System.String)">
            <summary>
            Query the specified index using Lucene syntax
            </summary>
            <param name="indexName">Name of the index.</param>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Include(System.String)">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.IDocumentSession.GetDocumentUrl(System.Object)">
            <summary>
            Gets the document URL for the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentSession.SaveChanges">
            <summary>
            Saves all the changes to the Raven server.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentSession.Store(System.Object)">
            <summary>
            Stores the specified dynamic entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="P:Raven.Client.IDocumentSession.DatabaseCommands">
            <summary>
            Gets the database commands.
            </summary>
            <value>The database commands.</value>
        </member>
        <member name="T:Raven.Client.ITransactionalDocumentSession">
            <summary>
            Implementors of this interface provide transactional operations
            Note that this interface is mostly useful only for expert usage
            </summary>
        </member>
        <member name="M:Raven.Client.ITransactionalDocumentSession.Commit(System.Guid)">
            <summary>
            Commits the transaction specified.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.ITransactionalDocumentSession.Rollback(System.Guid)">
            <summary>
            Rollbacks the transaction specified.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.ITransactionalDocumentSession.PromoteTransaction(System.Guid)">
            <summary>
            Promotes a transaction specified to a distributed transaction
            </summary>
            <param name="fromTxId">From tx id.</param>
            <returns>The token representing the distributed transaction</returns>
        </member>
        <member name="M:Raven.Client.ITransactionalDocumentSession.StoreRecoveryInformation(System.Guid,System.Guid,System.Byte[])">
            <summary>
            Stores the recovery information for the specified transaction
            </summary>
            <param name="resourceManagerId">The resource manager Id for this transaction</param>
            <param name="txId">The tx id.</param>
            <param name="recoveryInformation">The recovery information.</param>
        </member>
        <member name="P:Raven.Client.ITransactionalDocumentSession.ResourceManagerId">
            <summary>
            The transaction resource manager identifer
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.#ctor(Raven.Client.Document.DocumentStore,Raven.Client.IDocumentStoreListener[],Raven.Client.IDocumentDeleteListener[])">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.DocumentSession"/> class.
            </summary>
            <param name="documentStore">The document store.</param>
            <param name="storeListeners">The store listeners.</param>
            <param name="deleteListeners">The delete listeners.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Load``1(System.String)">
            <summary>
            Loads the specified entity with the specified id.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Load``1(System.String[])">
            <summary>
            Loads the specified entities with the specified ids.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Query``1(System.String)">
            <summary>
            Queries the specified index using Linq.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <param name="indexName">Name of the index.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Query``2">
            <summary>
            Queries the index specified by <typeparamref name="TIndexCreator"/> using Linq.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <typeparam name="TIndexCreator">The type of the index creator.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Refresh``1(``0)">
            <summary>
            Refreshes the specified entity from Raven server.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Include(System.String)">
            <summary>
            Begin a load while including the specified path
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.GetDocumentUrl(System.Object)">
            <summary>
            Gets the document URL for the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.SaveChanges">
            <summary>
            Saves all the changes to the Raven server.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.LuceneQuery``1(System.String)">
            <summary>
            Query the specified index using Lucene syntax
            </summary>
            <typeparam name="T"></typeparam>
            <param name="indexName">Name of the index.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Commit(System.Guid)">
            <summary>
            Commits the specified tx id.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.Rollback(System.Guid)">
            <summary>
            Rollbacks the specified tx id.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.PromoteTransaction(System.Guid)">
            <summary>
            Promotes the transaction.
            </summary>
            <param name="fromTxId">From tx id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentSession.StoreRecoveryInformation(System.Guid,System.Guid,System.Byte[])">
            <summary>
            Stores the recovery information for the specified transaction
            </summary>
            <param name="resourceManagerId"></param>
            <param name="txId">The tx id.</param>
            <param name="recoveryInformation">The recovery information.</param>
        </member>
        <member name="P:Raven.Client.Document.DocumentSession.DatabaseCommands">
            <summary>
            Gets the database commands.
            </summary>
            <value>The database commands.</value>
        </member>
        <member name="T:Raven.Client.Document.DocumentSession.DocumentMetadata">
            <summary>
            Metadata held about an entity by the session
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentSession.DocumentMetadata.OriginalValue">
            <summary>
            Gets or sets the original value.
            </summary>
            <value>The original value.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentSession.DocumentMetadata.Metadata">
            <summary>
            Gets or sets the metadata.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentSession.DocumentMetadata.ETag">
            <summary>
            Gets or sets the ETag.
            </summary>
            <value>The ETag.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentSession.DocumentMetadata.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentSession.DocumentMetadata.OriginalMetadata">
            <summary>
            Gets or sets the original metadata.
            </summary>
            <value>The original metadata.</value>
        </member>
        <member name="T:Raven.Client.Document.DocumentSession.SaveChangesData">
            <summary>
            Data for a batch command to the server
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentSession.SaveChangesData.Commands">
            <summary>
            Gets or sets the commands.
            </summary>
            <value>The commands.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentSession.SaveChangesData.Entities">
            <summary>
            Gets or sets the entities.
            </summary>
            <value>The entities.</value>
        </member>
        <member name="T:Raven.Client.Document.ILoaderWithInclude">
            <summary>
            Fluent interface for specifying include paths
            for loading documents
            </summary>
        </member>
        <member name="M:Raven.Client.Document.ILoaderWithInclude.Include(System.String)">
            <summary>
            Includes the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ILoaderWithInclude.Load``1(System.String[])">
            <summary>
            Loads the specified ids.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ILoaderWithInclude.Load``1(System.String)">
            <summary>
            Loads the specified id.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.Document.MultiLoaderWithInclude">
            <summary>
            Fluent implementation for specifying include paths
            for loading documents
            </summary>
        </member>
        <member name="M:Raven.Client.Document.MultiLoaderWithInclude.Include(System.String)">
            <summary>
            Includes the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.MultiLoaderWithInclude.#ctor(Raven.Client.Document.DocumentSession)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.MultiLoaderWithInclude"/> class.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:Raven.Client.Document.MultiLoaderWithInclude.Load``1(System.String[])">
            <summary>
            Loads the specified ids.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.MultiLoaderWithInclude.Load``1(System.String)">
            <summary>
            Loads the specified id.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.Document.DocumentStore">
            <summary>
            Manages access to RavenDB and open sessions to work with RavenDB.
            </summary>
        </member>
        <member name="T:Raven.Client.IDocumentStore">
            <summary>
            Interface for managing access to RavenDB and open sessions.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentStore.Initialize">
            <summary>
            Initializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentStore.RegisterListener(Raven.Client.IDocumentDeleteListener)">
            <summary>
            Registers the delete listener.
            </summary>
            <param name="deleteListener">The delete listener.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentStore.RegisterListener(Raven.Client.IDocumentStoreListener)">
            <summary>
            Registers the store listener.
            </summary>
            <param name="documentStoreListener">The document store listener.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentStore.OpenSession">
            <summary>
            Opens the session.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Raven.Client.IDocumentStore.SharedOperationsHeaders">
            <summary>
            Gets the shared operations headers.
            </summary>
            <value>The shared operations headers.</value>
        </member>
        <member name="E:Raven.Client.IDocumentStore.Stored">
            <summary>
            Occurs when an entity is stored inside any session opened from this instance
            </summary>
        </member>
        <member name="P:Raven.Client.IDocumentStore.Identifier">
            <summary>
            Gets or sets the identifier for this store.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Raven.Client.IDocumentStore.DatabaseCommands">
            <summary>
            Gets the database commands.
            </summary>
            <value>The database commands.</value>
        </member>
        <member name="P:Raven.Client.IDocumentStore.Conventions">
            <summary>
            Gets the conventions.
            </summary>
            <value>The conventions.</value>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.DocumentStore"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.OpenSession(System.Net.ICredentials)">
            <summary>
            Opens the session with the specified credentials.
            </summary>
            <param name="credentialsForSession">The credentials for session.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.RegisterListener(Raven.Client.IDocumentStoreListener)">
            <summary>
            Registers the store listener.
            </summary>
            <param name="documentStoreListener">The document store listener.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.OpenSession">
            <summary>
            Opens the session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.Initialize">
            <summary>
            Initializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.RegisterListener(Raven.Client.IDocumentDeleteListener)">
            <summary>
            Registers the delete listener.
            </summary>
            <param name="deleteListener">The delete listener.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.OpenAsyncSession">
            <summary>
            Opens the async session.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.SharedOperationsHeaders">
            <summary>
            Gets the shared operations headers.
            </summary>
            <value>The shared operations headers.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.DatabaseCommands">
            <summary>
            Gets the database commands.
            </summary>
            <value>The database commands.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.AsyncDatabaseCommands">
            <summary>
            Gets the async database commands.
            </summary>
            <value>The async database commands.</value>
        </member>
        <member name="E:Raven.Client.Document.DocumentStore.Stored">
            <summary>
            Occurs when an entity is stored inside any session opened from this instance
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.Credentials">
            <summary>
            Gets or sets the credentials.
            </summary>
            <value>The credentials.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.Identifier">
            <summary>
            Gets or sets the identifier for this store.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.ConnectionStringName">
            <summary>
            Gets or sets the name of the connection string name.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.Url">
            <summary>
            Gets or sets the URL.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.Conventions">
            <summary>
            Gets the conventions.
            </summary>
            <value>The conventions.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.ResourceManagerId">
            <summary>
            The resource manager id for the document store.
            IMPORTANT: Using Guid.NewGuid() to set this value is almost cetainly a mistake, you should set
            it to a value that remains consistent between restart of the system.
            </summary>
        </member>
        <member name="T:Raven.Client.Document.HiLoKeyGenerator">
            <summary>
            Generate hilo numbers against a RavenDB document
            </summary>
        </member>
        <member name="M:Raven.Client.Document.HiLoKeyGenerator.#ctor(Raven.Client.IDocumentStore,System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.HiLoKeyGenerator"/> class.
            </summary>
            <param name="documentStore">The document store.</param>
            <param name="tag">The tag.</param>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Raven.Client.Document.HiLoKeyGenerator.GenerateDocumentKey(Raven.Client.Document.DocumentConvention,System.Object)">
            <summary>
            Generates the document key.
            </summary>
            <param name="convention">The convention.</param>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.Document.MultiTypeHiLoKeyGenerator">
            <summary>
            Generate a hilo key for each given type
            </summary>
        </member>
        <member name="M:Raven.Client.Document.MultiTypeHiLoKeyGenerator.#ctor(Raven.Client.IDocumentStore,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.MultiTypeHiLoKeyGenerator"/> class.
            </summary>
            <param name="documentStore">The document store.</param>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Raven.Client.Document.MultiTypeHiLoKeyGenerator.GenerateDocumentKey(Raven.Client.Document.DocumentConvention,System.Object)">
            <summary>
            Generates the document key.
            </summary>
            <param name="conventions">The conventions.</param>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.Document.PromotableRavenClientEnlistment">
            <summary>
            An implementation of <see cref="T:System.Transactions.IPromotableSinglePhaseNotification"/> for RavenDB Client API
            </summary>
        </member>
        <member name="M:Raven.Client.Document.PromotableRavenClientEnlistment.#ctor(Raven.Client.ITransactionalDocumentSession)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.PromotableRavenClientEnlistment"/> class.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:Raven.Client.Document.PromotableRavenClientEnlistment.Promote">
            <summary>
            Notifies an enlisted object that an escalation of the delegated transaction has been requested.
            </summary>
            <returns>
            A transmitter/receiver propagation token that marshals a distributed transaction. For more information, see <see cref="M:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])"/>.
            </returns>
        </member>
        <member name="M:Raven.Client.Document.PromotableRavenClientEnlistment.Initialize">
            <summary>
            Notifies a transaction participant that enlistment has completed successfully.
            </summary>
            <exception cref="T:System.Transactions.TransactionException">An attempt to enlist or serialize a transaction.</exception>
        </member>
        <member name="M:Raven.Client.Document.PromotableRavenClientEnlistment.SinglePhaseCommit(System.Transactions.SinglePhaseEnlistment)">
            <summary>
            Notifies an enlisted object that the transaction is being committed.
            </summary>
            <param name="singlePhaseEnlistment">A <see cref="T:System.Transactions.SinglePhaseEnlistment"/> interface used to send a response to the transaction manager.</param>
        </member>
        <member name="M:Raven.Client.Document.PromotableRavenClientEnlistment.Rollback(System.Transactions.SinglePhaseEnlistment)">
            <summary>
            Notifies an enlisted object that the transaction is being rolled back.
            </summary>
            <param name="singlePhaseEnlistment">A <see cref="T:System.Transactions.SinglePhaseEnlistment"/> object used to send a response to the transaction manager.</param>
        </member>
        <member name="M:Raven.Client.Document.PromotableRavenClientEnlistment.GetLocalOrDistributedTransactionId(System.Transactions.TransactionInformation)">
            <summary>
            Gets the local or distributed transaction id.
            </summary>
            <param name="transactionInformation">The transaction information.</param>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.Document.RavenClientEnlistment">
            <summary>
            An implementation of <see cref="T:System.Transactions.IEnlistmentNotification"/> for the Raven Client API, allowing Raven
            Client API to participate in Distributed Transactions
            </summary>
        </member>
        <member name="M:Raven.Client.Document.RavenClientEnlistment.#ctor(Raven.Client.ITransactionalDocumentSession)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.RavenClientEnlistment"/> class.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:Raven.Client.Document.RavenClientEnlistment.Prepare(System.Transactions.PreparingEnlistment)">
            <summary>
            Notifies an enlisted object that a transaction is being prepared for commitment.
            </summary>
            <param name="preparingEnlistment">A <see cref="T:System.Transactions.PreparingEnlistment"/> object used to send a response to the transaction manager.</param>
        </member>
        <member name="M:Raven.Client.Document.RavenClientEnlistment.Commit(System.Transactions.Enlistment)">
            <summary>
            Notifies an enlisted object that a transaction is being committed.
            </summary>
            <param name="enlistment">An <see cref="T:System.Transactions.Enlistment"/> object used to send a response to the transaction manager.</param>
        </member>
        <member name="M:Raven.Client.Document.RavenClientEnlistment.Rollback(System.Transactions.Enlistment)">
            <summary>
            Notifies an enlisted object that a transaction is being rolled back (aborted).
            </summary>
            <param name="enlistment">A <see cref="T:System.Transactions.Enlistment"/> object used to send a response to the transaction manager.</param>
        </member>
        <member name="M:Raven.Client.Document.RavenClientEnlistment.InDoubt(System.Transactions.Enlistment)">
            <summary>
            Notifies an enlisted object that the status of a transaction is in doubt.
            </summary>
            <param name="enlistment">An <see cref="T:System.Transactions.Enlistment"/> object used to send a response to the transaction manager.</param>
        </member>
        <member name="M:Raven.Client.Document.RavenClientEnlistment.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.RavenClientEnlistment.Rollback(System.Transactions.SinglePhaseEnlistment)">
            <summary>
            Rollbacks the specified single phase enlistment.
            </summary>
            <param name="singlePhaseEnlistment">The single phase enlistment.</param>
        </member>
        <member name="T:Raven.Client.Document.ReflectionUtil">
            <summary>
            Helper class for reflection operations
            </summary>
        </member>
        <member name="M:Raven.Client.Document.ReflectionUtil.GetFullNameWithoutVersionInformation(System.Type)">
            <summary>
            Gets the full name without version information.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.Document.ShardedDocumentQuery`1">
            <summary>
            A query that is executed against sharded instances
            </summary>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.#ctor(System.String,System.Collections.Generic.IList{Raven.Client.IDocumentSession})">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.ShardedDocumentQuery`1"/> class.
            </summary>
            <param name="indexName">Name of the index.</param>
            <param name="shardSessions">The shard sessions.</param>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.#ctor(Raven.Client.IDocumentQuery{`0}[],System.Collections.Generic.IList{Raven.Client.IDocumentSession})">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.ShardedDocumentQuery`1"/> class.
            </summary>
            <param name="queries">The queries.</param>
            <param name="shardSessions">The shard sessions.</param>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.GetQueryResult">
            <summary>
            Gets the query result.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.ForEachQuery(System.Action{Raven.Client.IDocumentSession,Raven.Client.IDocumentQuery{`0}})">
            <summary>
            Fors the each query.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.Include(System.String)">
            <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.Take(System.Int32)">
            <summary>
            Takes the specified count.
            </summary>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.Skip(System.Int32)">
            <summary>
            Skips the specified count.
            </summary>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.Where(System.String)">
            <summary>
            Filter the results from the index using the specified where clause.
            </summary>
            <param name="whereClause">The where clause.</param>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.WhereEquals(System.String,System.Object)">
            <summary>
            	Matches exact value
            </summary>
            <remarks>
            	Defaults to NotAnalyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.WhereEquals(System.String,System.Object,System.Boolean)">
            <summary>
            	Matches exact value
            </summary>
            <remarks>
            	Defaults to allow wildcards only if analyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.WhereEquals(System.String,System.Object,System.Boolean,System.Boolean)">
            <summary>
            	Matches exact value
            </summary>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.WhereContains(System.String,System.Object)">
            <summary>
            	Matches substrings of the field
            </summary>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.WhereStartsWith(System.String,System.Object)">
            <summary>
            Matches fields which starts with the specified value.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.WhereEndsWith(System.String,System.Object)">
            <summary>
            Matches fields which ends with the specified value.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.WhereBetween(System.String,System.Object,System.Object)">
            <summary>
            Matches fields where the value is between the specified start and end, exclusive
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.WhereBetweenOrEqual(System.String,System.Object,System.Object)">
            <summary>
            Matches fields where the value is between the specified start and end, inclusive
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.WhereGreaterThan(System.String,System.Object)">
            <summary>
            Matches fields where the value is greater than the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.WhereGreaterThanOrEqual(System.String,System.Object)">
            <summary>
            Matches fields where the value is greater than or equal to the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.WhereLessThan(System.String,System.Object)">
            <summary>
            Matches fields where the value is less than the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.WhereLessThanOrEqual(System.String,System.Object)">
            <summary>
            Matches fields where the value is less than or equal to the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.AndAlso">
            <summary>
            Add an AND to the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.OrElse">
            <summary>
            Add an OR to the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.Boost(System.Decimal)">
            <summary>
            Specifies a boost weight to the last where clause.
            The higher the boost factor, the more relevant the term will be.
            </summary>
            <param name="boost">boosting factor where 1.0 is default, less than 1.0 is lower weight, greater than 1.0 is higher weight</param>
            <returns></returns>
            <remarks>
            http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Boosting%20a%20Term
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.Fuzzy(System.Decimal)">
            <summary>
            Specifies a fuzziness factor to the single word term in the last where clause
            </summary>
            <param name="fuzzy">0.0 to 1.0 where 1.0 means closer match</param>
            <returns></returns>
            <remarks>
            http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Fuzzy%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.Proximity(System.Int32)">
            <summary>
            Specifies a proximity distance for the phrase in the last where clause
            </summary>
            <param name="proximity">number of words within</param>
            <returns></returns>
            <remarks>
            http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Proximity%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.WithinRadiusOf(System.Double,System.Double,System.Double)">
            <summary>
            Filter matches to be inside the specified radius
            </summary>
            <param name="radius">The radius.</param>
            <param name="lat">The latitude.</param>
            <param name="lng">The longitude.</param>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.OrderBy(System.String[])">
            <summary>
            Order the results by the specified fields
            </summary>
            <remarks>
            The fields are the names of the fields to sort, defaulting to sorting by ascending.
            You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </remarks>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.WaitForNonStaleResultsAsOfNow">
            <summary>
            Instructs the query to wait for non stale results as of now.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.WaitForNonStaleResultsAsOfNow(System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of now for the specified timeout.
            </summary>
            <param name="waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.WaitForNonStaleResultsAsOf(System.DateTime)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff date.
            </summary>
            <param name="cutOff">The cut off.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.WaitForNonStaleResultsAsOf(System.DateTime,System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff date for the specified timeout
            </summary>
            <param name="cutOff">The cut off.</param>
            <param name="waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.WaitForNonStaleResults">
            <summary>
            EXPERT ONLY: Instructs the query to wait for non stale results.
            This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.WaitForNonStaleResults(System.TimeSpan)">
            <summary>
            EXPERT ONLY: Instructs the query to wait for non stale results for the specified wait timeout.
            This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
            <param name="timeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.SelectFields``1(System.String[])">
            <summary>
            Selects the specified fields directly from the index
            </summary>
            <typeparam name="TProjection">The type of the projection.</typeparam>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.AddOrder(System.String,System.Boolean)">
            <summary>
            Adds an ordering for a specific field to the query
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="descending">if set to <c>true</c> [descending].</param>
        </member>
        <member name="P:Raven.Client.Document.ShardedDocumentQuery`1.Not">
            <summary>
            Negate the next operation
            </summary>
        </member>
        <member name="P:Raven.Client.Document.ShardedDocumentQuery`1.QueryResult">
            <summary>
            Gets the query result
            Execute the query the first time that this is called.
            </summary>
            <value>The query result.</value>
        </member>
        <member name="T:Raven.Client.Document.SpatialDocumentQuery`1">
            <summary>
            A spatial query allows to perform spatial filtering on the index
            </summary>
        </member>
        <member name="M:Raven.Client.Document.SpatialDocumentQuery`1.#ctor(Raven.Client.Document.DocumentSession,Raven.Client.Client.IDatabaseCommands,System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.SpatialDocumentQuery`1"/> class.
            </summary>
            <param name="session">The session.</param>
            <param name="databaseCommands">The database commands.</param>
            <param name="indexName">Name of the index.</param>
            <param name="projectionFields">The projection fields.</param>
        </member>
        <member name="M:Raven.Client.Document.SpatialDocumentQuery`1.#ctor(Raven.Client.Document.DocumentQuery{`0},System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.SpatialDocumentQuery`1"/> class.
            </summary>
            <param name="documentQuery">The document query.</param>
            <param name="radius">The radius.</param>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
        </member>
        <member name="M:Raven.Client.Document.SpatialDocumentQuery`1.GenerateIndexQuery(System.String)">
            <summary>
            Generates the index query.
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.EntityStored">
            <summary>
            Delegate defintion when an entity is stored in the session
            </summary>
        </member>
        <member name="T:Raven.Client.EntityToDocument">
            <summary>
            Delegate definition for converting an entity to a document and metadata
            </summary>
        </member>
        <member name="T:Raven.Client.Exceptions.ConflictException">
            <summary>
            This exception occurs when a (replication) conflict is encountered.
            Usually this required a user to manually resolve the conlict.
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.ConflictException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ConflictException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.ConflictException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ConflictException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Raven.Client.Exceptions.ConflictException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ConflictException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Raven.Client.Exceptions.ConflictException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ConflictException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="P:Raven.Client.Exceptions.ConflictException.ConflictedVersionIds">
            <summary>
            Gets or sets the conflicted version ids.
            </summary>
            <value>The conflicted version ids.</value>
        </member>
        <member name="T:Raven.Client.Exceptions.NonAuthoritiveInformationException">
            <summary>
            This exception is raised when a non authoritive information is encountered
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.NonAuthoritiveInformationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonAuthoritiveInformationException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.NonAuthoritiveInformationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonAuthoritiveInformationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Raven.Client.Exceptions.NonAuthoritiveInformationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonAuthoritiveInformationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Raven.Client.Exceptions.NonAuthoritiveInformationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonAuthoritiveInformationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Raven.Client.Exceptions.NonUniqueObjectException">
            <summary>
            This exception is thrown when a separate instance of an entity is added to the session
            when a different entity with the same key already exists within the session.
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.NonUniqueObjectException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonUniqueObjectException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.NonUniqueObjectException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonUniqueObjectException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Raven.Client.Exceptions.NonUniqueObjectException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonUniqueObjectException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Raven.Client.Exceptions.NonUniqueObjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonUniqueObjectException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Raven.Client.Exceptions.ReadVetoException">
            <summary>
            This exception is raised whenever a trigger vetos the read by the session
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.ReadVetoException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ReadVetoException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.ReadVetoException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ReadVetoException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Raven.Client.Exceptions.ReadVetoException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ReadVetoException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Raven.Client.Exceptions.ReadVetoException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ReadVetoException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Raven.Client.StoredEntityEventArgs">
            <summary>
            The event args raised when an entity is stored
            </summary>
        </member>
        <member name="P:Raven.Client.StoredEntityEventArgs.SessionIdentifier">
            <summary>
            Gets or sets the session identifier.
            </summary>
            <value>The session identifier.</value>
        </member>
        <member name="P:Raven.Client.StoredEntityEventArgs.EntityInstance">
            <summary>
            Gets or sets the entity instance.
            </summary>
            <value>The entity instance.</value>
        </member>
        <member name="T:Raven.Client.IDocumentDeleteListener">
            <summary>
            Hook for users to provide additioanl logic on delete operations
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentDeleteListener.BeforeDelete(System.String,System.Object,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Invoked before the delete request is sent to the server.
            </summary>
            <param name="key">The key.</param>
            <param name="entityInstance">The entity instance.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="T:Raven.Client.IDocumentStoreListener">
            <summary>
            Hook for users to provide additioanl logic on store operations
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentStoreListener.BeforeStore(System.String,System.Object,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Invoked before the store request is sent to the server.
            </summary>
            <param name="key">The key.</param>
            <param name="entityInstance">The entity instance.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Raven.Client.IDocumentStoreListener.AfterStore(System.String,System.Object,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Invoked after the store request is sent to the server.
            </summary>
            <param name="key">The key.</param>
            <param name="entityInstance">The entity instance.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="T:Raven.Client.Indexes.AbstractIndexCreationTask">
            <summary>
            Base class for creating indexes
            </summary>
            <remarks>
            The naming convention is that underscores in the inherited class names are replaced by slashed
            For example: Posts_ByName will be saved to Posts/ByName
            </remarks>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.CreateIndexDefinition">
            <summary>
            Creates the index definition.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.Execute(Raven.Client.IDocumentStore)">
            <summary>
            Executes the index creation against the specified document store.
            </summary>
            <param name="documentStore">The document store.</param>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractIndexCreationTask.IndexName">
            <summary>
            Gets the name of the index.
            </summary>
            <value>The name of the index.</value>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractIndexCreationTask.DocumentStore">
            <summary>
            Gets or sets the document store.
            </summary>
            <value>The document store.</value>
        </member>
        <member name="T:Raven.Client.Indexes.ExpressionOperatorPrecedence">
            <summary>
            Precedence values for operations
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Primary">
            <summary>
            x.y  f(x)  a[x]  x++  x--  new
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Unary">
            <summary>
            +  -  !  ~  ++x  --x  (T)x
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Multiplicative">
            <summary>
            *  /  %
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Additive">
            <summary>
            +  -
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Shift">
            <summary>
            &lt;&lt; &gt;&gt;
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.RelationalAndTypeTesting">
            <summary>
            &lt;  &gt;  &lt;=  &gt;=  is  as
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Equality">
            <summary>
            ==  !=
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.LogicalAND">
            <summary>
            &amp;
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.LogicalXOR">
            <summary>
            ^
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.LogicalOR">
            <summary>
            |
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.ConditionalAND">
            <summary>
            &amp;&amp; (AndAlso in VB)
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.ConditionalOR">
            <summary>
            ||
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.NullCoalescing">
            <summary>
            ??
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Conditional">
            <summary>
            ?:
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Assignment">
            <summary>
            =  *=  /=  %=  +=  -=  &lt;&lt;=  &gt;&gt;=  &amp;=  ^=  |=
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.ParenthesisNotNeeded">
            <summary>
            pseudo operator for comparisons
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.ExpressionOperatorPrecedenceExtension">
            <summary>
            Methods on the enum
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionOperatorPrecedenceExtension.NeedsParenthesisFor(Raven.Client.Indexes.ExpressionOperatorPrecedence,Raven.Client.Indexes.ExpressionOperatorPrecedence)">
            <summary>
            Needs parenthesis for the expression
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.ExpressionStringBuilder">
            <summary>
            Based off of System.Linq.Expressions.ExpressionStringBuilder
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.ExpressionToString(Raven.Client.Document.DocumentConvention,System.Linq.Expressions.Expression)">
            <summary>
            Convert the expression to a string
            </summary>
            <param name="convention">The convention.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.BinaryExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitBlock(System.Linq.Expressions.BlockExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.BlockExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.CatchBlock"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.ConditionalExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Visits the <see cref="T:System.Linq.Expressions.ConstantExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
            <summary>
            Visits the <see cref="T:System.Linq.Expressions.DebugInfoExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitDefault(System.Linq.Expressions.DefaultExpression)">
            <summary>
            Visits the <see cref="T:System.Linq.Expressions.DefaultExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.DynamicExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitElementInit(System.Linq.Expressions.ElementInit)">
            <summary>
            Visits the element init.
            </summary>
            <param name="initializer">The initializer.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitExtension(System.Linq.Expressions.Expression)">
            <summary>
            Visits the children of the extension expression.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitGoto(System.Linq.Expressions.GotoExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.GotoExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitIndex(System.Linq.Expressions.IndexExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.IndexExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.InvocationExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitLabel(System.Linq.Expressions.LabelExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.LabelExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
            <summary>
            Visits the lambda.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">The node.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.ListInitExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitLoop(System.Linq.Expressions.LoopExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.LoopExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.MemberExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
            Visits the member assignment.
            </summary>
            <param name="assignment">The assignment.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.MemberInitExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>
            Visits the member list binding.
            </summary>
            <param name="binding">The binding.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>
            Visits the member member binding.
            </summary>
            <param name="binding">The binding.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.MethodCallExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.NewExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.NewArrayExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visits the <see cref="T:System.Linq.Expressions.ParameterExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.SwitchExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.SwitchCase"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitTry(System.Linq.Expressions.TryExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.TryExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.TypeBinaryExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.UnaryExpression"/>.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="T:Raven.Client.Indexes.IndexCreation">
            <summary>
            Helper class for creating indexed from implementations of <see cref="T:Raven.Client.Indexes.AbstractIndexCreationTask"/>.
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.IndexCreation.CreateIndexes(System.Reflection.Assembly,Raven.Client.IDocumentStore)">
            <summary>
            Creates the indexes found in the specified assembly.
            </summary>
            <param name="assemblyToScanForIndexingTasks">The assembly to scan for indexing tasks.</param>
            <param name="documentStore">The document store.</param>
        </member>
        <member name="M:Raven.Client.Indexes.IndexCreation.CreateIndexes(System.ComponentModel.Composition.Hosting.ExportProvider,Raven.Client.IDocumentStore)">
            <summary>
            Creates the indexes found in the specified catalog
            </summary>
            <param name="catalogToGetnIndexingTasksFrom">The catalog to getn indexing tasks from.</param>
            <param name="documentStore">The document store.</param>
        </member>
        <member name="T:Raven.Client.Indexes.IndexDefinition`2">
            <summary>
            This class attempts to provide a strongly typed index defintion on the client.
            It is here solely as a convienance, and it is _expected_ to fail in some scenarios.
            The recommended way is to define indexes outside your code, using the Web UI.
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.IndexDefinition`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Indexes.IndexDefinition`2"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.IndexDefinition`2.ToIndexDefinition(Raven.Client.Document.DocumentConvention)">
            <summary>
            Toes the index definition.
            </summary>
            <param name="convention">The convention.</param>
            <returns></returns>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinition`2.Map">
            <summary>
            Gets or sets the map function
            </summary>
            <value>The map.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinition`2.Reduce">
            <summary>
            Gets or sets the reduce function
            </summary>
            <value>The reduce.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinition`2.Stores">
            <summary>
            Gets or sets the stores options
            </summary>
            <value>The stores.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinition`2.Indexes">
            <summary>
            Gets or sets the indexing options
            </summary>
            <value>The indexes.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinition`2.SortOptions">
            <summary>
            Gets or sets the sort options.
            </summary>
            <value>The sort options.</value>
        </member>
        <member name="T:Raven.Client.Indexes.IndexDefinition`1">
            <summary>
            This class attempts to provide a strongly typed index defintion on the client.
            It is here solely as a convienance, and it is _expected_ to fail in some scenarios.
            The recommended way is to define indexes outside your code, using the Web UI.
            </summary>
        </member>
        <member name="T:Raven.Client.Linq.DateTools">
            <summary> Provides support for converting dates to strings and vice-versa.
            The strings are structured so that lexicographic sorting orders 
            them by date, which makes them suitable for use as field values 
            and search terms.
            
            <p/>This class also helps you to limit the resolution of your dates. Do not
            save dates with a finer resolution than you really need, as then
            RangeQuery and PrefixQuery will require more memory and become slower.
            
            <p/>Compared to {@link DateField} the strings generated by the methods
            in this class take slightly more space, unless your selected resolution
            is set to <code>Resolution.DAY</code> or lower.
            
            <p/>
            Another approach is {@link NumericUtils}, which provides
            a sortable binary representation (prefix encoded) of numeric values, which
            date/time are.
            For indexing a {@link Date} or {@link Calendar}, just get the unix timestamp as
            <code>long</code> using {@link Date#getTime} or {@link Calendar#getTimeInMillis} and
            index this as a numeric value with {@link NumericField}
            and use {@link NumericRangeQuery} to query it.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.DateTools.DateToString(System.DateTime,Raven.Client.Linq.DateTools.Resolution)">
            <summary> Converts a Date to a string suitable for indexing.
            
            </summary>
            <param name="date">the date to be converted
            </param>
            <param name="resolution">the desired resolution, see
            {@link #Round(Date, DateTools.Resolution)}
            </param>
            <returns> a string in format <code>yyyyMMddHHmmssSSS</code> or shorter,
            depending on <code>resolution</code>; using GMT as timezone 
            </returns>
        </member>
        <member name="M:Raven.Client.Linq.DateTools.TimeToString(System.Int64,Raven.Client.Linq.DateTools.Resolution)">
            <summary> Converts a millisecond time to a string suitable for indexing.
            
            </summary>
            <param name="time">the date expressed as milliseconds since January 1, 1970, 00:00:00 GMT
            </param>
            <param name="resolution">the desired resolution, see
            {@link #Round(long, DateTools.Resolution)}
            </param>
            <returns> a string in format <code>yyyyMMddHHmmssSSS</code> or shorter,
            depending on <code>resolution</code>; using GMT as timezone
            </returns>
        </member>
        <member name="M:Raven.Client.Linq.DateTools.StringToTime(System.String)">
            <summary> Converts a string produced by <code>timeToString</code> or
            <code>DateToString</code> back to a time, represented as the
            number of milliseconds since January 1, 1970, 00:00:00 GMT.
            
            </summary>
            <param name="dateString">the date string to be converted
            </param>
            <returns> the number of milliseconds since January 1, 1970, 00:00:00 GMT
            </returns>
            <throws>  ParseException if <code>dateString</code> is not in the  </throws>
            <summary>  expected format 
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.DateTools.StringToDate(System.String)">
            <summary> Converts a string produced by <code>timeToString</code> or
            <code>DateToString</code> back to a time, represented as a
            Date object.
            
            </summary>
            <param name="dateString">the date string to be converted
            </param>
            <returns> the parsed time as a Date object 
            </returns>
            <throws>  ParseException if <code>dateString</code> is not in the  </throws>
            <summary>  expected format 
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.DateTools.Round(System.DateTime,Raven.Client.Linq.DateTools.Resolution)">
            <summary>
            Limit a date's resolution. For example, the date <code>2004-09-21 13:50:11</code>
            will be changed to <code>2004-09-01 00:00:00</code> when using
            <code>Resolution.MONTH</code>.
            </summary>
            <param name="date">The date.</param>
            <param name="resolution">The desired resolution of the date to be returned</param>
            <returns>
            the date with all values more precise than <code>resolution</code>
            set to 0 or 1
            </returns>
        </member>
        <member name="M:Raven.Client.Linq.DateTools.Round(System.Int64,Raven.Client.Linq.DateTools.Resolution)">
            <summary> Limit a date's resolution. For example, the date <code>1095767411000</code>
            (which represents 2004-09-21 13:50:11) will be changed to 
            <code>1093989600000</code> (2004-09-01 00:00:00) when using
            <code>Resolution.MONTH</code>.
            
            </summary>
            <param name="time">The time in milliseconds (not ticks).</param>
            <param name="resolution">The desired resolution of the date to be returned
            </param>
            <returns> the date with all values more precise than <code>resolution</code>
            set to 0 or 1, expressed as milliseconds since January 1, 1970, 00:00:00 GMT
            </returns>
        </member>
        <member name="T:Raven.Client.Linq.DateTools.Resolution">
            <summary>Specifies the time granularity. </summary>
        </member>
        <member name="F:Raven.Client.Linq.DateTools.Resolution.YEAR">
            <summary>
            Resolution by year
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.DateTools.Resolution.MONTH">
            <summary>
            Resolution by month
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.DateTools.Resolution.DAY">
            <summary>
            Resolution by day
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.DateTools.Resolution.HOUR">
            <summary>
            Resolution by hour
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.DateTools.Resolution.MINUTE">
            <summary>
            Resolution by minute
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.DateTools.Resolution.SECOND">
            <summary>
            Resolution by second
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.DateTools.Resolution.MILLISECOND">
            <summary>
            Resolution by millisecond
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.DateTools.Resolution.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:Raven.Client.Linq.IRavenQueryable`1">
            <summary>
            An implementation of <see cref="T:System.Linq.IOrderedQueryable`1"/> with Raven specific operation
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryable`1.Customize(System.Action{Raven.Client.IDocumentQuery{`0}})">
            <summary>
            Customizes the query using the specified action
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.Linq.IRavenQueryProvider">
            <summary>
            Extension for the builtin <see cref="T:System.Linq.IQueryProvider"/> allowing for Raven specific operations
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryProvider.Customize(System.Delegate)">
            <summary>
            Customizes the query using the specified action
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="P:Raven.Client.Linq.IRavenQueryProvider.Session">
            <summary>
            Gets the session.
            </summary>
            <value>The session.</value>
        </member>
        <member name="P:Raven.Client.Linq.IRavenQueryProvider.IndexName">
            <summary>
            Gets the name of the index.
            </summary>
            <value>The name of the index.</value>
        </member>
        <member name="T:Raven.Client.Linq.RavenQueryable`1">
            <summary>
            Implements <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/>
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryable`1.#ctor(Raven.Client.Linq.IRavenQueryProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Linq.RavenQueryable`1"/> class.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryable`1.#ctor(Raven.Client.Linq.IRavenQueryProvider,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Linq.RavenQueryable`1"/> class.
            </summary>
            <param name="provider">The provider.</param>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryable`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryable`1.Customize(System.Action{Raven.Client.IDocumentQuery{`0}})">
            <summary>
            Customizes the query using the specified action
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryable`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:Raven.Client.Linq.RavenQueryProvider`1">
            <summary>
            An implementation of <see cref="T:Raven.Client.Linq.IRavenQueryProvider"/>
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.#ctor(Raven.Client.IDocumentSession,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Linq.RavenQueryProvider`1"/> class.
            </summary>
            <param name="session">The session.</param>
            <param name="indexName">Name of the index.</param>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes the query represented by a specified expression tree.
            </summary>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <returns>
            The value that results from executing the specified query.
            </returns>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
            <summary>
            Executes the specified expression.
            </summary>
            <typeparam name="S"></typeparam>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes the query represented by a specified expression tree.
            </summary>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <returns>
            The value that results from executing the specified query.
            </returns>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.Customize(System.Delegate)">
            <summary>
            Customizes the query using the specified action
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProvider`1.Session">
            <summary>
            Gets the session.
            </summary>
            <value>The session.</value>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProvider`1.IndexName">
            <summary>
            Gets the name of the index.
            </summary>
            <value>The name of the index.</value>
        </member>
        <member name="T:Raven.Client.Linq.RavenQueryProviderProcessor`1">
            <summary>
            Process a Linq expression to a Lucene query
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.#ctor(Raven.Client.IDocumentSession,System.Action{Raven.Client.IDocumentQuery{`0}},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Linq.RavenQueryProviderProcessor`1"/> class.
            </summary>
            <param name="session">The session.</param>
            <param name="customizeQuery">The customize query.</param>
            <param name="indexName">Name of the index.</param>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.VisitExpression(System.Linq.Expressions.Expression)">
            <summary>
            Visits the expression and generate the lucene query
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.ProcessExpression(System.Linq.Expressions.Expression)">
            <summary>
            Processes the expression.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProviderProcessor`1.LuceneQuery">
            <summary>
            Gets the lucene query.
            </summary>
            <value>The lucene query.</value>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProviderProcessor`1.FieldsToFetch">
            <summary>
            Gets or sets the fields to fetch.
            </summary>
            <value>The fields to fetch.</value>
        </member>
        <member name="T:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType">
            <summary>
            Different query types 
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.All">
            <summary>
            
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.Any">
            <summary>
            
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.Count">
            <summary>
            Get count of items for the query
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.First">
            <summary>
            Get only the first item
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.FirstOrDefault">
            <summary>
            Get only the first item (or null)
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.Single">
            <summary>
            Get only the first item (or throw if there are more than one)
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.SingleOrDefault">
            <summary>
            Get only the first item (or throw if there are more than one) or null if empty
            </summary>
        </member>
        <member name="T:Raven.Client.RavenExtensions">
            <summary>
            Extensions that provide nicer API for using Raven Client API
            </summary>
        </member>
        <member name="F:Raven.Client.RavenExtensions.RavenDocumentByEntityName">
            <summary>
            Constant for the builtin index 
            </summary>
        </member>
        <member name="M:Raven.Client.RavenExtensions.LuceneQuery``1(Raven.Client.IDocumentSession)">
            <summary>
            Query the "Raven/DocumentsByEntityName" index for all instances of a specified tag.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="session">The session.</param>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.Shard.ShardedDocumentSession">
            <summary>
            Implements Unit of Work for accessing a set of sharded RavenDB servers
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Clear">
            <summary>
            Clears this instance.
            Remove all entities from the delete queue and stops tracking changes for all entities.
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.GetMetadataFor``1(``0)">
            <summary>
            Gets the metadata for the specified entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.GetDocumentId(System.Object)">
            <summary>
            Gets the document id.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.HasChanged(System.Object)">
            <summary>
            Determines whether the specified entity has changed.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            	<c>true</c> if the specified entity has changed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.#ctor(Raven.Client.Shard.ShardStrategy.IShardStrategy,Raven.Client.IDocumentSession[])">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Shard.ShardedDocumentSession"/> class.
            </summary>
            <param name="shardStrategy">The shard strategy.</param>
            <param name="shardSessions">The shard sessions.</param>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Load``1(System.String)">
            <summary>
            Loads the specified entity with the specified id.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Load``1(System.String[])">
            <summary>
            Loads the specified entities with the specified ids.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Include(System.String)">
            <summary>
            Begin a load while including the specified path
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.GetDocumentUrl(System.Object)">
            <summary>
            Gets the document URL for the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Delete``1(``0)">
            <summary>
            Marks the specified entity for deletion. The entity will be deleted when <see cref="M:Raven.Client.IDocumentSession.SaveChanges"/> is called.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Query``1(System.String)">
            <summary>
            Queries the specified index using Linq.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <param name="indexName">Name of the index.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Query``2">
            <summary>
            Queries the index specified by <typeparamref name="TIndexCreator"/> using Linq.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <typeparam name="TIndexCreator">The type of the index creator.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Refresh``1(``0)">
            <summary>
            Refreshes the specified entity from Raven server.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Store(System.Object)">
            <summary>
            Stores the specified entity in the session. The entity will be saved when <see cref="M:Raven.Client.IDocumentSession.SaveChanges"/> is called.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.StoreDynamic(System.Object)">
            <summary>
            Stores a dynamic entity
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Evict``1(``0)">
            <summary>
            Evicts the specified entity from the session.
            Remove the entity from the delete queue and stops tracking changes for this entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.SaveChanges">
            <summary>
            Note that while we can assume a transaction for a single shard, cross shard transactions will NOT work.
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.LuceneQuery``1(System.String)">
            <summary>
            Query the specified index using Lucene syntax
            </summary>
            <typeparam name="T"></typeparam>
            <param name="indexName">Name of the index.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentSession.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentSession.UseOptimisticConcurrency">
            <summary>
            Gets or sets a value indicating whether the session should use optimistic concurrency.
            When set to <c>true</c>, a check is made so that a change made behind the session back would fail
            and raise <see cref="T:Raven.Database.Exceptions.ConcurrencyException"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentSession.AllowNonAuthoritiveInformation">
            <summary>
            Gets or sets a value indicating whether non authoritive information is allowed.
            Non authoritive information is document that has been modified by a transaction that hasn't been committed.
            The server provides the latest committed version, but it is known that attempting to write to a non authoritive document
            will fail, because it is already modified.
            If set to <c>false</c>, the session will wait <see cref="P:Raven.Client.Shard.ShardedDocumentSession.NonAuthoritiveInformationTimeout"/> for the transaction to commit to get an
            authoritive information. If the wait is longer than <see cref="P:Raven.Client.Shard.ShardedDocumentSession.NonAuthoritiveInformationTimeout"/>, <see cref="T:Raven.Client.Exceptions.NonAuthoritiveInformationException"/> is thrown.
            </summary>
            <value>
            	<c>true</c> if non authoritive information is allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentSession.NonAuthoritiveInformationTimeout">
            <summary>
            Gets or sets the timeout to wait for authoritive information if encountered non authoritive document.
            </summary>
            <value></value>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentSession.NumberOfRequests">
            <summary>
            Gets the number of requests for this session
            </summary>
            <value></value>
        </member>
        <member name="E:Raven.Client.Shard.ShardedDocumentSession.Stored">
            <summary>
            Occurs when an entity is stored in the session
            </summary>
        </member>
        <member name="E:Raven.Client.Shard.ShardedDocumentSession.OnEntityConverted">
            <summary>
            Occurs when an entity is converted to a document and metadata.
            Changes made to the document / metadata instances passed to this event will be persisted.
            </summary>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentSession.HasChanges">
            <summary>
            Gets a value indicating whether any of the entities tracked by the session has changes.
            </summary>
            <value></value>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentSession.DatabaseCommands">
            <summary>
            Gets the database commands.
            </summary>
            <value>The database commands.</value>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentSession.StoreIdentifier">
            <summary>
            Gets the store identifier for this session.
            The store identifier is the identifier for the particular RavenDB instance.
            This is mostly useful when using sharding.
            </summary>
            <value>The store identifier.</value>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentSession.Conventions">
            <summary>
            Gets the conventions used by this session
            </summary>
            <value>The conventions.</value>
            <remarks>
            This instance is shared among all sessions, changes to the <see cref="T:Raven.Client.Document.DocumentConvention"/> should be done
            via the <see cref="T:Raven.Client.IDocumentStore"/> instance, not on a single session.
            </remarks>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentSession.MaxNumberOfRequestsPerSession">
            <summary>
            Gets or sets the max number of requests per session.
            If the <see cref="P:Raven.Client.Shard.ShardedDocumentSession.NumberOfRequests"/> rise above <see cref="P:Raven.Client.Shard.ShardedDocumentSession.MaxNumberOfRequestsPerSession"/>, an exception will be thrown.
            </summary>
            <value>The max number of requests per session.</value>
        </member>
        <member name="T:Raven.Client.Shard.ShardedDocumentStore">
            <summary>
            Implements a sharded document store
            Hiding most sharding details behind this and the <see cref="T:Raven.Client.Shard.ShardedDocumentSession"/> gives you the ability to use
            sharding without really thinking about this too much
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentStore.#ctor(Raven.Client.Shard.ShardStrategy.IShardStrategy,Raven.Client.Shard.Shards)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Shard.ShardedDocumentStore"/> class.
            </summary>
            <param name="shardStrategy">The shard strategy.</param>
            <param name="shards">The shards.</param>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentStore.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentStore.RegisterListener(Raven.Client.IDocumentStoreListener)">
            <summary>
            Registers the store listener.
            </summary>
            <param name="documentStoreListener">The document store listener.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentStore.OpenSession">
            <summary>
            Opens the session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentStore.Initialize">
            <summary>
            Initializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Shard.ShardedDocumentStore.RegisterListener(Raven.Client.IDocumentDeleteListener)">
            <summary>
            Registers the delete listener.
            </summary>
            <param name="deleteListener">The delete listener.</param>
            <returns></returns>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentStore.SharedOperationsHeaders">
            <summary>
            Gets the shared operations headers.
            </summary>
            <value>The shared operations headers.</value>
        </member>
        <member name="E:Raven.Client.Shard.ShardedDocumentStore.Stored">
            <summary>
            Occurs when an entity is stored inside any session opened from this instance
            </summary>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentStore.Identifier">
            <summary>
            Gets or sets the identifier for this store.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentStore.DatabaseCommands">
            <summary>
            Gets the database commands.
            </summary>
            <value>The database commands.</value>
        </member>
        <member name="P:Raven.Client.Shard.ShardedDocumentStore.Conventions">
            <summary>
            Gets the conventions.
            </summary>
            <value>The conventions.</value>
        </member>
        <member name="T:Raven.Client.Shard.Shards">
            <summary>
            Referest a list of shards
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.Shards.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Shard.Shards"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.Shards.#ctor(System.Collections.Generic.IEnumerable{Raven.Client.Document.DocumentStore})">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Shard.Shards"/> class.
            </summary>
            <param name="shards">The shards.</param>
        </member>
        <member name="T:Raven.Client.Shard.ShardStrategy.IShardStrategy">
            <summary>
            The shard strategy define how we access, select and resolve specific shards
            inside the <see cref="T:Raven.Client.Shard.ShardedDocumentStore"/>.
            </summary>
        </member>
        <member name="P:Raven.Client.Shard.ShardStrategy.IShardStrategy.ShardSelectionStrategy">
            <summary>
            Gets the shard selection strategy.
            </summary>
            <value>The shard selection strategy.</value>
        </member>
        <member name="P:Raven.Client.Shard.ShardStrategy.IShardStrategy.ShardResolutionStrategy">
            <summary>
            Gets the shard resolution strategy.
            </summary>
            <value>The shard resolution strategy.</value>
        </member>
        <member name="P:Raven.Client.Shard.ShardStrategy.IShardStrategy.ShardAccessStrategy">
            <summary>
            Gets the shard access strategy.
            </summary>
            <value>The shard access strategy.</value>
        </member>
        <member name="T:Raven.Client.Shard.ShardStrategy.ShardAccess.IShardAccessStrategy">
            <summary>
            Apply an operation to all the shard session
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardStrategy.ShardAccess.IShardAccessStrategy.Apply``1(System.Collections.Generic.IList{Raven.Client.IDocumentSession},System.Func{Raven.Client.IDocumentSession,System.Collections.Generic.IList{``0}})">
            <summary>
            Applies the specified action to all shard sessions.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="shardSessions">The shard sessions.</param>
            <param name="operation">The operation.</param>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.Shard.ShardStrategy.ShardAccess.ParallelShardAccessStrategy">
            <summary>
            Apply an operation to all the shard session in parallel
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardStrategy.ShardAccess.ParallelShardAccessStrategy.Apply``1(System.Collections.Generic.IList{Raven.Client.IDocumentSession},System.Func{Raven.Client.IDocumentSession,System.Collections.Generic.IList{``0}})">
            <summary>
            Applies the specified action to all shard sessions in parallel
            </summary>
            <typeparam name="T"></typeparam>
            <param name="shardSessions">The shard sessions.</param>
            <param name="operation">The operation.</param>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.Shard.ShardStrategy.ShardAccess.SequentialShardAccessStrategy">
            <summary>
            Apply an operation to all the shard session in sequence
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardStrategy.ShardAccess.SequentialShardAccessStrategy.Apply``1(System.Collections.Generic.IList{Raven.Client.IDocumentSession},System.Func{Raven.Client.IDocumentSession,System.Collections.Generic.IList{``0}})">
            <summary>
            Applies the specified action for all shard sessions.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="shardSessions">The shard sessions.</param>
            <param name="operation">The operation.</param>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.Shard.ShardStrategy.ShardResolution.AllShardsResolutionStrategy">
            <summary>
            Shard resultion strategy that select all the shards
            </summary>
        </member>
        <member name="T:Raven.Client.Shard.ShardStrategy.ShardResolution.IShardResolutionStrategy">
            <summary>
            Implementors of this interface provide a way to decide which shards will be queried
            for a specified operation
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardStrategy.ShardResolution.IShardResolutionStrategy.SelectShardIds(Raven.Client.Shard.ShardStrategy.ShardResolution.ShardResolutionStrategyData)">
            <summary>
            Selects the shard ids appropriate for the specified data
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardStrategy.ShardResolution.AllShardsResolutionStrategy.SelectShardIds(Raven.Client.Shard.ShardStrategy.ShardResolution.ShardResolutionStrategyData)">
            <summary>
            Selects the shard ids appropraite for the given data
            </summary>
        </member>
        <member name="T:Raven.Client.Shard.ShardStrategy.ShardResolution.ShardResolutionStrategyData">
            <summary>
            Information required to resolve the appropriate shard for an entity / entity and key
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardStrategy.ShardResolution.ShardResolutionStrategyData.BuildFrom(System.Type)">
            <summary>
            Builds an instance of <see cref="T:Raven.Client.Shard.ShardStrategy.ShardResolution.ShardResolutionStrategyData"/> from the given type
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardStrategy.ShardResolution.ShardResolutionStrategyData.BuildFrom(System.Type,System.String)">
            <summary>
            Builds an instance of <see cref="T:Raven.Client.Shard.ShardStrategy.ShardResolution.ShardResolutionStrategyData"/> from the given type
            and key
            </summary>
        </member>
        <member name="P:Raven.Client.Shard.ShardStrategy.ShardResolution.ShardResolutionStrategyData.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Raven.Client.Shard.ShardStrategy.ShardResolution.ShardResolutionStrategyData.EntityType">
            <summary>
            Gets or sets the type of the entity.
            </summary>
            <value>The type of the entity.</value>
        </member>
        <member name="T:Raven.Client.Shard.ShardStrategy.ShardSelection.IShardSelectionStrategy">
            <summary>
            Implementors of this interface provide a way to go from an exists/new
            entity to the appropriate shard for the entity
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardStrategy.ShardSelection.IShardSelectionStrategy.ShardIdForNewObject(System.Object)">
            <summary>
            Find the shard id for a new object.
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.ShardStrategy.ShardSelection.IShardSelectionStrategy.ShardIdForExistingObject(System.Object)">
            <summary>
            Find the shard id for existing object.
            </summary>
        </member>
        <member name="T:Raven.Client.Shard.ShardStrategy.ShardStrategy">
            <summary>
            Default shard strategy for the sharding document store
            </summary>
        </member>
        <member name="P:Raven.Client.Shard.ShardStrategy.ShardStrategy.ShardSelectionStrategy">
            <summary>
            Gets or sets the shard selection strategy.
            </summary>
            <value>The shard selection strategy.</value>
        </member>
        <member name="P:Raven.Client.Shard.ShardStrategy.ShardStrategy.ShardResolutionStrategy">
            <summary>
            Gets or sets the shard resolution strategy.
            </summary>
            <value>The shard resolution strategy.</value>
        </member>
        <member name="P:Raven.Client.Shard.ShardStrategy.ShardStrategy.ShardAccessStrategy">
            <summary>
            Gets or sets the shard access strategy.
            </summary>
            <value>The shard access strategy.</value>
        </member>
        <member name="T:Raven.Client.Util.Inflector">
            <summary>
            The Inflector class transforms words from one 
            form to another. For example, from singular to plural.
            </summary>
        </member>
        <member name="M:Raven.Client.Util.Inflector.Pluralize(System.String)">
            <summary>
            Return the plural of a word.
            </summary>
            <param name="word">The singular form</param>
            <returns>The plural form of <paramref name="word"/></returns>
        </member>
        <member name="M:Raven.Client.Util.Inflector.Singularize(System.String)">
            <summary>
            Return the singular of a word.
            </summary>
            <param name="word">The plural form</param>
            <returns>The singular form of <paramref name="word"/></returns>
        </member>
        <member name="M:Raven.Client.Util.Inflector.Capitalize(System.String)">
            <summary>
            Capitalizes a word.
            </summary>
            <param name="word">The word to be capitalized.</param>
            <returns><paramref name="word"/> capitalized.</returns>
        </member>
        <member name="T:Raven.Database.BatchResult">
            <summary>
            The result of a single operation inside a batch
            </summary>
        </member>
        <member name="P:Raven.Database.BatchResult.Etag">
            <summary>
            Gets or sets the etag generated by the etag (if applicable)
            </summary>
            <value>The etag.</value>
        </member>
        <member name="P:Raven.Database.BatchResult.Method">
            <summary>
            Gets or sets the method used for the operation (PUT,DELETE,PATCH).
            </summary>
            <value>The method.</value>
        </member>
        <member name="P:Raven.Database.BatchResult.Key">
            <summary>
            Gets or sets the key of the document
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Raven.Database.BatchResult.Metadata">
            <summary>
            Gets or sets the updated metadata.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="T:Raven.Database.Data.Attachment">
            <summary>
            Attachment data and metadata
            </summary>
        </member>
        <member name="P:Raven.Database.Data.Attachment.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:Raven.Database.Data.Attachment.Metadata">
            <summary>
            Gets or sets the metadata.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="P:Raven.Database.Data.Attachment.Etag">
            <summary>
            Gets or sets the etag.
            </summary>
            <value>The etag.</value>
        </member>
        <member name="T:Raven.Database.Data.AttachmentInformation">
            <summary>
            Describe an attachment, but without the actual attachment data
            </summary>
        </member>
        <member name="P:Raven.Database.Data.AttachmentInformation.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:Raven.Database.Data.AttachmentInformation.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Raven.Database.Data.AttachmentInformation.Metadata">
            <summary>
            Gets or sets the metadata.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="P:Raven.Database.Data.AttachmentInformation.Etag">
            <summary>
            Gets or sets the etag.
            </summary>
            <value>The etag.</value>
        </member>
        <member name="T:Raven.Database.Data.DeleteCommandData">
            <summary>
            A single batch operation for a document DELETE
            </summary>
        </member>
        <member name="T:Raven.Database.Data.ICommandData">
            <summary>
            A single operation inside a batch
            </summary>
        </member>
        <member name="M:Raven.Database.Data.ICommandData.ToJson">
            <summary>
            Translate this instance to a Json object.
            </summary>
        </member>
        <member name="P:Raven.Database.Data.ICommandData.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Raven.Database.Data.ICommandData.Method">
            <summary>
            Gets the method.
            </summary>
            <value>The method.</value>
        </member>
        <member name="P:Raven.Database.Data.ICommandData.Etag">
            <summary>
            Gets the etag.
            </summary>
            <value>The etag.</value>
        </member>
        <member name="M:Raven.Database.Data.DeleteCommandData.ToJson">
            <summary>
            Translate this instance to a Json object.
            </summary>
        </member>
        <member name="P:Raven.Database.Data.DeleteCommandData.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Raven.Database.Data.DeleteCommandData.Method">
            <summary>
            Gets the method.
            </summary>
            <value>The method.</value>
        </member>
        <member name="P:Raven.Database.Data.DeleteCommandData.Etag">
            <summary>
            Gets or sets the etag.
            </summary>
            <value>The etag.</value>
        </member>
        <member name="T:Raven.Database.Data.DisposableAction">
            <summary>
            A helper class that translate between Disposable and Action
            </summary>
        </member>
        <member name="M:Raven.Database.Data.DisposableAction.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Data.DisposableAction"/> class.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Raven.Database.Data.DisposableAction.Dispose">
            <summary>
            Execute the relevant actions
            </summary>
        </member>
        <member name="T:Raven.Database.Data.IndexFailureInformation">
            <summary>
            Information about index failure rates
            </summary>
        </member>
        <member name="M:Raven.Database.Data.IndexFailureInformation.GetErrorMessage">
            <summary>
            Gets the error message.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Raven.Database.Data.IndexFailureInformation.IsInvalidIndex">
            <summary>
            Gets a value indicating whether this is invalid index.
            </summary>
            <value>
            	<c>true</c> if this is invalid index; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Raven.Database.Data.IndexFailureInformation.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Raven.Database.Data.IndexFailureInformation.Attempts">
            <summary>
            Gets or sets the number of indexing attempts.
            </summary>
        </member>
        <member name="P:Raven.Database.Data.IndexFailureInformation.Errors">
            <summary>
            Gets or sets the number of indexing errors.
            </summary>
        </member>
        <member name="P:Raven.Database.Data.IndexFailureInformation.Successes">
            <summary>
            Gets or sets the number of indexing successes.
            </summary>
        </member>
        <member name="P:Raven.Database.Data.IndexFailureInformation.FailureRate">
            <summary>
            Gets the failure rate.
            </summary>
            <value>The failure rate.</value>
        </member>
        <member name="T:Raven.Database.Data.IndexQuery">
            <summary>
            All the infomration required to query a Raven index
            </summary>
        </member>
        <member name="M:Raven.Database.Data.IndexQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Data.IndexQuery"/> class.
            </summary>
        </member>
        <member name="M:Raven.Database.Data.IndexQuery.GetIndexQueryUrl(System.String,System.String,System.String)">
            <summary>
            Gets the index query URL.
            </summary>
            <param name="operationUrl">The operation URL.</param>
            <param name="index">The index.</param>
            <param name="operationName">Name of the operation.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Database.Data.IndexQuery.GetCustomQueryStringVariables">
            <summary>
            Gets the custom query string variables.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Raven.Database.Data.IndexQuery.Query">
            <summary>
            Gets or sets the query.
            </summary>
            <value>The query.</value>
        </member>
        <member name="P:Raven.Database.Data.IndexQuery.TotalSize">
            <summary>
            Gets or sets the total size.
            </summary>
            <value>The total size.</value>
        </member>
        <member name="P:Raven.Database.Data.IndexQuery.Start">
            <summary>
            Gets or sets the start of records to read.
            </summary>
            <value>The start.</value>
        </member>
        <member name="P:Raven.Database.Data.IndexQuery.PageSize">
            <summary>
            Gets or sets the size of the page.
            </summary>
            <value>The size of the page.</value>
        </member>
        <member name="P:Raven.Database.Data.IndexQuery.FieldsToFetch">
            <summary>
            Gets or sets the fields to fetch.
            </summary>
            <value>The fields to fetch.</value>
        </member>
        <member name="P:Raven.Database.Data.IndexQuery.SortedFields">
            <summary>
            Gets or sets the fields to sort by
            </summary>
            <value>The sorted fields.</value>
        </member>
        <member name="P:Raven.Database.Data.IndexQuery.Cutoff">
            <summary>
            Gets or sets the cutoff date
            </summary>
            <value>The cutoff.</value>
        </member>
        <member name="P:Raven.Database.Data.IndexQuery.SkippedResults">
            <summary>
            Gets or sets the number of skipped results.
            </summary>
            <value>The skipped results.</value>
        </member>
        <member name="T:Raven.Database.Data.MetadataExtensions">
            <summary>
            Extensions for handling metadata
            </summary>
        </member>
        <member name="M:Raven.Database.Data.MetadataExtensions.FilterHeaders(System.Collections.Specialized.NameValueCollection,System.Boolean)">
            <summary>
            Filters the headers from unwanted headers
            </summary>
            <param name="self">The self.</param>
            <param name="isServerDocument">if set to <c>true</c> [is server document].</param>
            <returns></returns>
        </member>
        <member name="T:Raven.Database.Data.MultiLoadResult">
            <summary>
            Represent a result which include both document results and included documents
            </summary>
        </member>
        <member name="M:Raven.Database.Data.MultiLoadResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Data.MultiLoadResult"/> class.
            </summary>
        </member>
        <member name="P:Raven.Database.Data.MultiLoadResult.Results">
            <summary>
            Gets or sets the document results.
            </summary>
        </member>
        <member name="P:Raven.Database.Data.MultiLoadResult.Includes">
            <summary>
            Gets or sets the included documents
            </summary>
        </member>
        <member name="T:Raven.Database.Data.PatchCommandData">
            <summary>
             A single batch operation for a document PATCH
            </summary>
        </member>
        <member name="M:Raven.Database.Data.PatchCommandData.ToJson">
            <summary>
            Translate this instance to a Json object.
            </summary>
        </member>
        <member name="P:Raven.Database.Data.PatchCommandData.Patches">
            <summary>
            Gets or sets the patches applied to this document
            </summary>
            <value>The patches.</value>
        </member>
        <member name="P:Raven.Database.Data.PatchCommandData.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Raven.Database.Data.PatchCommandData.Method">
            <summary>
            Gets the method.
            </summary>
            <value>The method.</value>
        </member>
        <member name="P:Raven.Database.Data.PatchCommandData.Etag">
            <summary>
            Gets the etag.
            </summary>
            <value>The etag.</value>
        </member>
        <member name="T:Raven.Database.Data.PutCommandData">
            <summary>
            A single batch operation for a document PUT
            </summary>
        </member>
        <member name="M:Raven.Database.Data.PutCommandData.ToJson">
            <summary>
            Translate this instance to a Json object.
            </summary>
        </member>
        <member name="P:Raven.Database.Data.PutCommandData.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Raven.Database.Data.PutCommandData.Method">
            <summary>
            Gets the method.
            </summary>
            <value>The method.</value>
        </member>
        <member name="P:Raven.Database.Data.PutCommandData.Etag">
            <summary>
            Gets or sets the etag.
            </summary>
            <value>The etag.</value>
        </member>
        <member name="P:Raven.Database.Data.PutCommandData.Document">
            <summary>
            Gets or sets the document.
            </summary>
            <value>The document.</value>
        </member>
        <member name="P:Raven.Database.Data.PutCommandData.Metadata">
            <summary>
            Gets or sets the metadata.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="T:Raven.Database.Data.QueryResult">
            <summary>
            The result of a query
            </summary>
        </member>
        <member name="M:Raven.Database.Data.QueryResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Data.QueryResult"/> class.
            </summary>
        </member>
        <member name="P:Raven.Database.Data.QueryResult.Results">
            <summary>
            Gets or sets the document resulting from this query.
            </summary>
            <value>The results.</value>
        </member>
        <member name="P:Raven.Database.Data.QueryResult.Includes">
            <summary>
            Gets or sets the document included in the result.
            </summary>
            <value>The includes.</value>
        </member>
        <member name="P:Raven.Database.Data.QueryResult.IsStale">
            <summary>
            Gets or sets a value indicating whether the index is stale.
            </summary>
            <value><c>true</c> if the index is stale; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Raven.Database.Data.QueryResult.TotalResults">
            <summary>
            Gets or sets the total results for this query
            </summary>
            <value>The total results.</value>
        </member>
        <member name="P:Raven.Database.Data.QueryResult.SkippedResults">
            <summary>
            Gets or sets the skipped results (duplicate documents);
            </summary>
            <value>The skipped results.</value>
        </member>
        <member name="T:Raven.Database.Data.SortedField">
            <summary>
            Represent a field sort options
            </summary>
        </member>
        <member name="M:Raven.Database.Data.SortedField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Data.SortedField"/> class.
            </summary>
            <param name="fieldWithPotentialPrefix">The field with potential prefix.</param>
        </member>
        <member name="P:Raven.Database.Data.SortedField.Field">
            <summary>
            Gets or sets the field.
            </summary>
            <value>The field.</value>
        </member>
        <member name="P:Raven.Database.Data.SortedField.Descending">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Raven.Database.Data.SortedField"/> is descending.
            </summary>
            <value><c>true</c> if descending; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Raven.Database.Data.SpatialIndexQuery">
            <summary>
            A query using spatial filtering
            </summary>
        </member>
        <member name="M:Raven.Database.Data.SpatialIndexQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Data.SpatialIndexQuery"/> class.
            </summary>
        </member>
        <member name="M:Raven.Database.Data.SpatialIndexQuery.#ctor(Raven.Database.Data.IndexQuery)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Data.SpatialIndexQuery"/> class.
            </summary>
            <param name="query">The query.</param>
        </member>
        <member name="M:Raven.Database.Data.SpatialIndexQuery.GetCustomQueryStringVariables">
            <summary>
            Gets the custom query string variables.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Raven.Database.Data.SpatialIndexQuery.Latitude">
            <summary>
            Gets or sets the latitude.
            </summary>
            <value>The latitude.</value>
        </member>
        <member name="P:Raven.Database.Data.SpatialIndexQuery.Longitude">
            <summary>
            Gets or sets the longitude.
            </summary>
            <value>The longitude.</value>
        </member>
        <member name="P:Raven.Database.Data.SpatialIndexQuery.Radius">
            <summary>
            Gets or sets the radius.
            </summary>
            <value>The radius.</value>
        </member>
        <member name="P:Raven.Database.Data.SpatialIndexQuery.SortByDistance">
            <summary>
            Gets or sets a value indicating whether [sort by distance].
            </summary>
            <value><c>true</c> if [sort by distance]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Raven.Database.Exceptions.BadRequestException">
            <summary>
            This exception is raised when a bad request is made to the server
            </summary>
        </member>
        <member name="M:Raven.Database.Exceptions.BadRequestException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Exceptions.BadRequestException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Database.Exceptions.BadRequestException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Exceptions.BadRequestException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Raven.Database.Exceptions.BadRequestException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Exceptions.BadRequestException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Raven.Database.Exceptions.BadRequestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Exceptions.BadRequestException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Raven.Database.Exceptions.ConcurrencyException">
            <summary>
            This exception is raised when a concurrency conflict is encountered
            </summary>
        </member>
        <member name="M:Raven.Database.Exceptions.ConcurrencyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Exceptions.ConcurrencyException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Database.Exceptions.ConcurrencyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Exceptions.ConcurrencyException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Raven.Database.Exceptions.ConcurrencyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Exceptions.ConcurrencyException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Raven.Database.Exceptions.ConcurrencyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Exceptions.ConcurrencyException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="P:Raven.Database.Exceptions.ConcurrencyException.ExpectedETag">
            <summary>
            Gets or sets the expected E tag.
            </summary>
            <value>The expected E tag.</value>
        </member>
        <member name="P:Raven.Database.Exceptions.ConcurrencyException.ActualETag">
            <summary>
            Gets or sets the actual E tag.
            </summary>
            <value>The actual E tag.</value>
        </member>
        <member name="T:Raven.Database.Exceptions.IndexDisabledException">
            <summary>
            This exception is raised when querying an index that was disabled because the error rate exceeded safety margins
            </summary>
        </member>
        <member name="M:Raven.Database.Exceptions.IndexDisabledException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Exceptions.IndexDisabledException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Database.Exceptions.IndexDisabledException.#ctor(Raven.Database.Data.IndexFailureInformation)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Exceptions.IndexDisabledException"/> class.
            </summary>
            <param name="information">The information.</param>
        </member>
        <member name="M:Raven.Database.Exceptions.IndexDisabledException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Exceptions.IndexDisabledException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Raven.Database.Exceptions.IndexDisabledException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Exceptions.IndexDisabledException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Raven.Database.Exceptions.IndexDisabledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Exceptions.IndexDisabledException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="P:Raven.Database.Exceptions.IndexDisabledException.Information">
            <summary>
            Gets or sets the information about the index failure 
            </summary>
            <value>The information.</value>
        </member>
        <member name="T:Raven.Database.Exceptions.IndexDoesNotExistsException">
            <summary>
            This exception is raised when a query is made against a non existing index
            </summary>
        </member>
        <member name="M:Raven.Database.Exceptions.IndexDoesNotExistsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Exceptions.IndexDoesNotExistsException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Database.Exceptions.IndexDoesNotExistsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Exceptions.IndexDoesNotExistsException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Raven.Database.Exceptions.IndexDoesNotExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Exceptions.IndexDoesNotExistsException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Raven.Database.Exceptions.IndexDoesNotExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Exceptions.IndexDoesNotExistsException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Raven.Database.Exceptions.OperationVetoedException">
            <summary>
            This exception is raised when an operation has been vetoed by a trigger
            </summary>
        </member>
        <member name="M:Raven.Database.Exceptions.OperationVetoedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Exceptions.OperationVetoedException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Database.Exceptions.OperationVetoedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Exceptions.OperationVetoedException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Raven.Database.Exceptions.OperationVetoedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Exceptions.OperationVetoedException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Raven.Database.Exceptions.OperationVetoedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Exceptions.OperationVetoedException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Raven.Database.Extensions.Reference`1">
            <summary>
            A reference that can be used with labmda expression
            to pass a value out.
            </summary>
        </member>
        <member name="P:Raven.Database.Extensions.Reference`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Raven.Database.Extensions.StreamExtension">
            <summary>
            Extentions for working with streams
            </summary>
        </member>
        <member name="M:Raven.Database.Extensions.StreamExtension.ReadData(System.IO.Stream)">
            <summary>
            	Reads the entire request buffer to memory and
            	return it as a byte array.
            </summary>
        </member>
        <member name="T:Raven.Database.Indexing.FieldIndexing">
            <summary>
            Options for indexing a field
            </summary>
        </member>
        <member name="F:Raven.Database.Indexing.FieldIndexing.No">
            <summary>
            Do not index the field value. This field can thus not be searched, but one can still access its contents provided it is stored.
            </summary>
        </member>
        <member name="F:Raven.Database.Indexing.FieldIndexing.NotAnalyzedNoNorms">
            <summary>
            Expert: Index the field's value without an Analyzer, and also disable the storing of norms. 
            No norms means that index-time field and document boosting and field length normalization are disabled. 
            The benefit is less memory usage as norms take up one byte of RAM per indexed field for every document 
            in the index, during searching. 
            </summary>
        </member>
        <member name="F:Raven.Database.Indexing.FieldIndexing.Analyzed">
            <summary>
            Index the tokens produced by running the field's value through an Analyzer. This is useful for common text.
            </summary>
        </member>
        <member name="F:Raven.Database.Indexing.FieldIndexing.NotAnalyzed">
            <summary>
            Index the field's value without using an Analyzer, so it can be searched.  As no analyzer is used the 
            value will be stored as a single term. This is useful for unique Ids like product numbers.
            </summary>
        </member>
        <member name="T:Raven.Database.Indexing.FieldStorage">
            <summary>
            Specifies whether and how a field should be stored.
            </summary>
        </member>
        <member name="F:Raven.Database.Indexing.FieldStorage.Yes">
            <summary>
            Store the original field value in the index. This is useful for short texts like a document's title which should be displayed with the results. 
            The value is stored in its original form, i.e. no analyzer is used before it is stored.
            </summary>
        </member>
        <member name="F:Raven.Database.Indexing.FieldStorage.No">
            <summary>
            Do not store the field value in the index.
            </summary>
        </member>
        <member name="F:Raven.Database.Indexing.FieldStorage.Compress">
            <summary>
            Store the original field value in the index in a compressed form. This is useful for long documents and for binary valued fields.
            </summary>
        </member>
        <member name="T:Raven.Database.Indexing.IndexDefinition">
            <summary>
            A definition of a RavenIndex
            </summary>
        </member>
        <member name="M:Raven.Database.Indexing.IndexDefinition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Indexing.IndexDefinition"/> class.
            </summary>
        </member>
        <member name="M:Raven.Database.Indexing.IndexDefinition.Equals(Raven.Database.Indexing.IndexDefinition)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Database.Indexing.IndexDefinition.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Raven.Database.Indexing.IndexDefinition.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:Raven.Database.Indexing.IndexDefinition.Map">
            <summary>
            Gets or sets the map function
            </summary>
            <value>The map.</value>
        </member>
        <member name="P:Raven.Database.Indexing.IndexDefinition.Reduce">
            <summary>
            Gets or sets the reduce function
            </summary>
            <value>The reduce.</value>
        </member>
        <member name="P:Raven.Database.Indexing.IndexDefinition.IsMapReduce">
            <summary>
            Gets a value indicating whether this instance is map reduce index definition
            </summary>
            <value>
            	<c>true</c> if this instance is map reduce; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Raven.Database.Indexing.IndexDefinition.Stores">
            <summary>
            Gets or sets the stores options
            </summary>
            <value>The stores.</value>
        </member>
        <member name="P:Raven.Database.Indexing.IndexDefinition.Indexes">
            <summary>
            Gets or sets the indexing options
            </summary>
            <value>The indexes.</value>
        </member>
        <member name="P:Raven.Database.Indexing.IndexDefinition.SortOptions">
            <summary>
            Gets or sets the sort options.
            </summary>
            <value>The sort options.</value>
        </member>
        <member name="P:Raven.Database.Indexing.IndexDefinition.Analyzers">
            <summary>
            Gets or sets the analyzers options
            </summary>
            <value>The analyzers.</value>
        </member>
        <member name="T:Raven.Database.Indexing.NumberUtil">
            <summary>
            Helper function for numeric to indexed string and vice versa
            </summary>
        </member>
        <member name="M:Raven.Database.Indexing.NumberUtil.NumberToString(System.Int32)">
            <summary>
            Translate a number to an indexable string
            </summary>
        </member>
        <member name="M:Raven.Database.Indexing.NumberUtil.NumberToString(System.Int64)">
            <summary>
            Translate a number to an indexable string
            </summary>
        </member>
        <member name="M:Raven.Database.Indexing.NumberUtil.NumberToString(System.Single)">
            <summary>
            Translate a number to an indexable string
            </summary>
        </member>
        <member name="M:Raven.Database.Indexing.NumberUtil.NumberToString(System.Double)">
            <summary>
            Translate a number to an indexable string
            </summary>
        </member>
        <member name="M:Raven.Database.Indexing.NumberUtil.StringToNumber(System.String)">
            <summary>
            Translate an indexable string to a number
            </summary>
        </member>
        <member name="T:Raven.Database.Indexing.SortOptions">
            <summary>
            The sort options to use for a particular field
            </summary>
        </member>
        <member name="F:Raven.Database.Indexing.SortOptions.String">
            <summary>Sort using term values as Strings.  Sort values are String and lower
            values are at the front. 
            </summary>
        </member>
        <member name="F:Raven.Database.Indexing.SortOptions.Int">
            <summary>Sort using term values as encoded Integers.  Sort values are Integer and
            lower values are at the front. 
            </summary>
        </member>
        <member name="F:Raven.Database.Indexing.SortOptions.Float">
            <summary>Sort using term values as encoded Floats.  Sort values are Float and
            lower values are at the front. 
            </summary>
        </member>
        <member name="F:Raven.Database.Indexing.SortOptions.Long">
            <summary>Sort using term values as encoded Longs.  Sort values are Long and
            lower values are at the front. 
            </summary>
        </member>
        <member name="F:Raven.Database.Indexing.SortOptions.Double">
            <summary>Sort using term values as encoded Doubles.  Sort values are Double and
            lower values are at the front. 
            </summary>
        </member>
        <member name="F:Raven.Database.Indexing.SortOptions.Short">
            <summary>Sort using term values as encoded Shorts.  Sort values are Short and
            lower values are at the front. 
            </summary>
        </member>
        <member name="F:Raven.Database.Indexing.SortOptions.Custom">
            <summary>Sort using a custom Comparator.  Sort values are any Comparable and
            sorting is done according to natural order. 
            </summary>
        </member>
        <member name="F:Raven.Database.Indexing.SortOptions.Byte">
            <summary>Sort using term values as encoded Bytes.  Sort values are Byte and
            lower values are at the front. 
            </summary>
        </member>
        <member name="F:Raven.Database.Indexing.SortOptions.StringVal">
            <summary>Sort using term values as Strings, but comparing by
            value (using String.compareTo) for all comparisons.
            This is typically slower than {@link #STRING}, which
            uses ordinals to do the sorting. 
            </summary>
        </member>
        <member name="T:Raven.Database.JsonDocument">
            <summary>
            A document representation:
            * Data / Projection
            * Etag
            * Metadata
            </summary>
        </member>
        <member name="M:Raven.Database.JsonDocument.ToJson">
            <summary>
            	Translate the json document to a <see cref="T:Newtonsoft.Json.Linq.JObject"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:Raven.Database.JsonDocument.DataAsJson">
            <summary>
            	Gets or sets the document data as json.
            </summary>
            <value>The data as json.</value>
        </member>
        <member name="P:Raven.Database.JsonDocument.Metadata">
            <summary>
            	Gets or sets the metadata for the document
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="P:Raven.Database.JsonDocument.Key">
            <summary>
            	Gets or sets the key for the document
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Raven.Database.JsonDocument.NonAuthoritiveInformation">
            <summary>
            	Gets or sets a value indicating whether this document is non authoritive (modified by uncommited transaction).
            </summary>
        </member>
        <member name="P:Raven.Database.JsonDocument.Etag">
            <summary>
            Gets or sets the etag.
            </summary>
            <value>The etag.</value>
        </member>
        <member name="P:Raven.Database.JsonDocument.LastModified">
            <summary>
            	Gets or sets the last modified date for the document
            </summary>
            <value>The last modified.</value>
        </member>
        <member name="P:Raven.Database.JsonDocument.Projection">
            <summary>
            	Gets or sets the projection for this document. The projection is used when loading the data directly from the index.
            	Either <see cref="P:Raven.Database.JsonDocument.Projection"/> or <see cref="P:Raven.Database.JsonDocument.DataAsJson"/> are valid, never both.
            </summary>
            <value>The projection.</value>
        </member>
        <member name="T:Raven.Database.Json.DynamicUtil">
            <summary>
            Helper class for working with dynamic values completely dynamically
            </summary>
        </member>
        <member name="M:Raven.Database.Json.DynamicUtil.GetValueDynamically(System.Object,System.String)">
            <summary>
            Gets the value dynamically.
            </summary>
            <param name="entity">The entity.</param>
            <param name="dynamicMemberName">Name of the dynamic member.</param>
            <returns></returns>
        </member>
        <member name="T:Raven.Database.Json.JsonDynamicConverter">
            <summary>
            Convert a dynamic variable to a json value and vice versa
            </summary>
        </member>
        <member name="M:Raven.Database.Json.JsonDynamicConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Raven.Database.Json.JsonDynamicConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Raven.Database.Json.JsonDynamicConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Raven.Database.Json.JsonEnumConverter">
            <summary>
            Convert an enum to a json string
            </summary>
        </member>
        <member name="M:Raven.Database.Json.JsonEnumConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Raven.Database.Json.JsonEnumConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Raven.Database.Json.JsonEnumConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Raven.Database.Json.JsonExtensions">
            <summary>
            Json extensions 
            </summary>
        </member>
        <member name="M:Raven.Database.Json.JsonExtensions.ToJObject(System.Byte[])">
            <summary>
            Convert a byte array to a JObject
            </summary>
        </member>
        <member name="M:Raven.Database.Json.JsonExtensions.ToBytes(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Convert a JToken to a byte array
            </summary>
        </member>
        <member name="M:Raven.Database.Json.JsonExtensions.JsonDeserialization``1(System.Byte[])">
            <summary>
            Deserialize a <param name="self"/> to an instance of <typeparam name="T"/>
            </summary>
        </member>
        <member name="M:Raven.Database.Json.JsonExtensions.JsonDeserialization``1(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Deserialize a <param name="self"/> to an instance of<typeparam name="T"/>
            </summary>
        </member>
        <member name="T:Raven.Database.Json.PatchCommandType">
            <summary>
            Patch command options
            </summary>
        </member>
        <member name="F:Raven.Database.Json.PatchCommandType.Set">
            <summary>
            Set a property
            </summary>
        </member>
        <member name="F:Raven.Database.Json.PatchCommandType.Unset">
            <summary>
            Unset (remove) a property
            </summary>
        </member>
        <member name="F:Raven.Database.Json.PatchCommandType.Add">
            <summary>
            Add an item to an array
            </summary>
        </member>
        <member name="F:Raven.Database.Json.PatchCommandType.Insert">
            <summary>
            Insert an item to an array at a specified position
            </summary>
        </member>
        <member name="F:Raven.Database.Json.PatchCommandType.Remove">
            <summary>
            Remove an item from an array at a specified position
            </summary>
        </member>
        <member name="F:Raven.Database.Json.PatchCommandType.Modify">
            <summary>
            Modify a property value by providing a nested set of patch operation
            </summary>
        </member>
        <member name="F:Raven.Database.Json.PatchCommandType.Inc">
            <summary>
            Increment a property by a specified value
            </summary>
        </member>
        <member name="F:Raven.Database.Json.PatchCommandType.Copy">
            <summary>
            Copy a property value to another property
            </summary>
        </member>
        <member name="F:Raven.Database.Json.PatchCommandType.Rename">
            <summary>
            Rename a property
            </summary>
        </member>
        <member name="T:Raven.Database.Json.PatchRequest">
            <summary>
            A patch request for a specified document
            </summary>
        </member>
        <member name="M:Raven.Database.Json.PatchRequest.ToJson">
            <summary>
            Translate this instance to json
            </summary>
        </member>
        <member name="M:Raven.Database.Json.PatchRequest.FromJson(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Create an instance from a json object
            </summary>
            <param name="patchRequestJson">The patch request json.</param>
        </member>
        <member name="P:Raven.Database.Json.PatchRequest.Type">
            <summary>
            Gets or sets the type of the operation
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Raven.Database.Json.PatchRequest.PrevVal">
            <summary>
            Gets or sets the prev val, which is compared against the current value to verify a
            change isn't overwriting new values.
            If the value is null, the operation is always successful
            </summary>
            <value>The prev val.</value>
        </member>
        <member name="P:Raven.Database.Json.PatchRequest.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Raven.Database.Json.PatchRequest.Nested">
            <summary>
            Gets or sets the nested operations to perform. This is only valid when the <see cref="P:Raven.Database.Json.PatchRequest.Type"/> is <see cref="F:Raven.Database.Json.PatchCommandType.Modify"/>.
            </summary>
            <value>The nested.</value>
        </member>
        <member name="P:Raven.Database.Json.PatchRequest.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Raven.Database.Json.PatchRequest.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>The position.</value>
        </member>
        <member name="T:Raven.Database.Linq.DynamicJsonObject">
            <summary>
            A dynamic implementation on top of <see cref="T:Newtonsoft.Json.Linq.JObject"/>
            </summary>
        </member>
        <member name="M:Raven.Database.Linq.DynamicJsonObject.#ctor(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Linq.DynamicJsonObject"/> class.
            </summary>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:Raven.Database.Linq.DynamicJsonObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result"/>.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:Raven.Database.Linq.DynamicJsonObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that get a value by index. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for indexing operations.
            </summary>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:Raven.Database.Linq.DynamicJsonObject.GetValue(System.String)">
            <summary>
            Gets the value for the specified name
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Database.Linq.DynamicJsonObject.GetDocumentId">
            <summary>
            Gets the document id.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Raven.Database.Linq.DynamicJsonObject.Inner">
            <summary>
            Gets the inner json object
            </summary>
            <value>The inner.</value>
        </member>
        <member name="T:Raven.Database.Linq.DynamicJsonObject.DynamicList">
            <summary>
            A list that responds to the dynamic object protocol
            </summary>
        </member>
        <member name="M:Raven.Database.Linq.DynamicJsonObject.DynamicList.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Database.Linq.DynamicJsonObject.DynamicList"/> class.
            </summary>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Raven.Database.Linq.DynamicJsonObject.DynamicList.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that invoke a member. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as calling a method.
            </summary>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:Raven.Database.Linq.DynamicJsonObject.DynamicList.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Database.Linq.DynamicJsonObject.DynamicList.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies to the specified array
            </summary>
            <param name="array">The array.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Raven.Database.Linq.DynamicJsonObject.DynamicList.Contains(System.Object)">
            <summary>
            Determines whether the list contains the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Raven.Database.Linq.DynamicJsonObject.DynamicList.IndexOf(System.Object)">
            <summary>
            Find the index of the specified item in the list
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Database.Linq.DynamicJsonObject.DynamicList.IndexOf(System.Object,System.Int32)">
            <summary>
            Find the index of the specified item in the list
             </summary>
            <param name="item">The item.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Database.Linq.DynamicJsonObject.DynamicList.IndexOf(System.Object,System.Int32,System.Int32)">
            <summary>
            Find the index of the specified item in the list/// 
            </summary>
            <param name="item">The item.</param>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="P:Raven.Database.Linq.DynamicJsonObject.DynamicList.SyncRoot">
            <summary>
            Gets the sync root.
            </summary>
            <value>The sync root.</value>
        </member>
        <member name="P:Raven.Database.Linq.DynamicJsonObject.DynamicList.IsSynchronized">
            <summary>
            Gets a value indicating whether this instance is synchronized.
            </summary>
            <value>
            	<c>true</c> if this instance is synchronized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Raven.Database.Linq.DynamicJsonObject.DynamicList.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:Raven.Database.Linq.DynamicJsonObject.DynamicList.IsFixedSize">
            <summary>
            Gets a value indicating whether this instance is fixed size.
            </summary>
            <value>
            	<c>true</c> if this instance is fixed size; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Raven.Database.Linq.DynamicJsonObject.DynamicList.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Raven.Database.Linq.DynamicJsonObject.DynamicList.Length">
            <summary>
            Gets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="T:Raven.Database.PatchResult">
            <summary>
            The result of a patch operation
            </summary>
        </member>
        <member name="F:Raven.Database.PatchResult.DocumentDoesNotExists">
            <summary>
            The document does not exists, operation was a no-op
            </summary>
        </member>
        <member name="F:Raven.Database.PatchResult.Patched">
            <summary>
            Document was properly patched
            </summary>
        </member>
        <member name="T:Raven.Database.PutResult">
            <summary>
            The result of a PUT operation
            </summary>
        </member>
        <member name="P:Raven.Database.PutResult.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Raven.Database.PutResult.ETag">
            <summary>
            Gets or sets the generated Etag for the PUT operation
            </summary>
            <value>The Etag.</value>
        </member>
        <member name="T:Raven.Database.TransactionInformation">
            <summary>
            Transaction information that identify the transaction id and timeout
            </summary>
        </member>
        <member name="P:Raven.Database.TransactionInformation.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Raven.Database.TransactionInformation.Timeout">
            <summary>
            Gets or sets the timeout.
            </summary>
            <value>The timeout.</value>
        </member>
    </members>
</doc>
